(in-package "ACL2")
(defun ACL22SMT () 
  (list
    (list "from" #\Space "z3" #\Space "import" #\Space "Solver" #\, #\Space "Bool" #\, #\Space "Int" #\, #\Space "Real" #\, #\Space "BoolSort" #\, #\Space "IntSort" #\, #\Space "RealSort" #\, #\Space "And" #\, #\Space "Or" #\, #\Space "Not" #\, #\Space "Implies" #\, #\Space "sat" #\, #\Space "unsat" #\, #\Space "Array" #\, #\Space "Select" #\, #\Space "Store" #\, #\Space "ToInt" #\, #\Space "Q"  #\Newline )
    (list  #\Newline )
    (list "def" #\Space "sort" #\( "x" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space "if" #\Space "type" #\( "x" #\) #\Space "=" "=" #\Space "bool" #\: #\Space #\Space #\Space #\Space "return" #\Space "BoolSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "elif" #\Space "type" #\( "x" #\) #\Space "=" "=" #\Space "int" #\: #\Space #\Space #\Space "return" #\Space "IntSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "elif" #\Space "type" #\( "x" #\) #\Space "=" "=" #\Space "float" #\: #\Space "return" #\Space "RealSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "elif" #\Space "hasattr" #\( "x" #\, #\Space #\' "sort" #\' #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space "x" #\. "sort" #\( #\) #\Space "=" "=" #\Space "BoolSort" #\( #\) #\: #\Space "return" #\Space "BoolSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space "x" #\. "sort" #\( #\) #\Space "=" "=" #\Space "IntSort" #\( #\) #\: #\Space #\Space "return" #\Space "IntSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space "x" #\. "sort" #\( #\) #\Space "=" "=" #\Space "RealSort" #\( #\) #\: #\Space "return" #\Space "RealSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "raise" #\Space "Exception" #\( #\' "unknown" #\Space "sort" #\Space "for" #\Space "expression" #\' #\)  #\Newline )
    (list  #\Newline )
    (list "class" #\Space "ACL22SMT" #\( "object" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space "class" #\Space "status" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "__init__" #\( "self" #\, #\Space "value" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "value" #\Space "=" #\Space "value"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "__str__" #\( "self" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "self" #\. "value" #\Space "is" #\Space "True" #\) #\: #\Space "return" #\Space #\' "QED" #\'  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "self" #\. "value" #\. "__class__" #\Space "=" "=" #\Space #\' "msg" #\' #\. "__class__" #\) #\: #\Space "return" #\Space "self" #\. "value"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "raise" #\Space "Exception" #\( #\' "unknown" #\Space "status" "?" #\' #\)  #\Newline )
    (list  #\Newline )
    (list "	" "	" "def" #\Space "isThm" #\( "self" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\( "self" #\. "value" #\Space "is" #\Space "True" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "class" #\Space "atom" #\: #\Space #\Space #\# #\Space "added" #\Space "my" #\Space "mrg" #\, #\Space "21" #\Space "May" #\Space "2015"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "__init__" #\( "self" #\, #\Space "string" #\) #\:  #\Newline )
    (list "	" "self" #\. "who_am_i" #\Space "=" #\Space "string" #\. "lower" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "__eq__" #\( "self" #\, #\Space "other" #\) #\:  #\Newline )
    (list "	" "return" #\( "self" #\. "who_am_i" #\Space "=" "=" #\Space "other" #\. "who_am_i" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "__ne__" #\( "self" #\, #\Space "other" #\) #\:  #\Newline )
    (list "	" "return" #\( "self" #\. "who_am_i" #\Space "!" "=" #\Space "other" #\. "who_am_i" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "__str__" #\( "self" #\) #\:  #\Newline )
    (list "	" "return" #\( "self" #\. "who_am_i" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "__init__" #\( "self" #\, #\Space "solver" "=" "0" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "solver" #\Space "!" "=" #\Space "0" #\) #\: #\Space "self" #\. "solver" #\Space "=" #\Space "solver"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "self" #\. "solver" #\Space "=" #\Space "Solver" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "nameNumber" #\Space "=" #\Space "0"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "newVar" #\( "self" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "varName" #\Space "=" #\Space #\' "$" #\' #\Space "+" #\Space "str" #\( "self" #\. "nameNumber" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "nameNumber" #\Space "=" #\Space "self" #\. "nameNumber" "+" "1"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "varName"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "isBool" #\( "self" #\, #\Space "who" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "Bool" #\( "who" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "isInt" #\( "self" #\, #\Space "who" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "Int" #\( "who" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "isReal" #\( "self" #\, #\Space "who" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "Real" #\( "who" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "floor" #\( "self" #\, #\Space "x" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "ToInt" #\( "x" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "plus" #\( "self" #\, #\Space "*" "args" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "reduce" #\( "lambda" #\Space "x" #\, #\Space "y" #\: #\Space "x" "+" "y" #\, #\Space "args" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "times" #\( "self" #\, #\Space "*" "args" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "reduce" #\( "lambda" #\Space "x" #\, #\Space "y" #\: #\Space "x" "*" "y" #\, #\Space "args" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "andx" #\( "self" #\, #\Space "*" "args" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "reduce" #\( "lambda" #\Space "x" #\, #\Space "y" #\: #\Space "And" #\( "x" #\, "y" #\) #\, #\Space "args" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "orx" #\( "self" #\, #\Space "*" "args" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "reduce" #\( "lambda" #\Space "x" #\, #\Space "y" #\: #\Space "Or" #\( "x" #\, "y" #\) #\, #\Space "args" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "minus" #\( "self" #\, #\Space "x" #\, "y" #\) #\: #\Space "return" #\Space "x" "-" "y"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "reciprocal" #\( "self" #\, #\Space "x" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "type" #\( "x" #\) #\Space "is" #\Space "int" #\) #\: #\Space "return" #\( "Q" #\( "1" #\, "x" #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "type" #\( "x" #\) #\Space "is" #\Space "float" #\) #\: #\Space "return" #\Space "1" #\. "0" "/" "x"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "return" #\Space "1" "/" "x"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "negate" #\( "self" #\, #\Space "x" #\) #\: #\Space "return" #\Space "-" "x"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "div" #\( "self" #\, #\Space "x" #\, #\Space "y" #\) #\: #\Space "return" #\Space "times" #\( "self" #\, "x" #\, "reciprocal" #\( "self" #\, "y" #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "gt" #\( "self" #\, #\Space "x" #\, "y" #\) #\: #\Space "return" #\Space "x" ">" "y"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "lt" #\( "self" #\, #\Space "x" #\, "y" #\) #\: #\Space "return" #\Space "x" "<" "y"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "ge" #\( "self" #\, #\Space "x" #\, "y" #\) #\: #\Space "return" #\Space "x" ">" "=" "y"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "le" #\( "self" #\, #\Space "x" #\, "y" #\) #\: #\Space "return" #\Space "x" "<" "=" "y"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "equal" #\( "self" #\, #\Space "x" #\, "y" #\) #\: #\Space "return" #\Space "x" "=" "=" "y"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "notx" #\( "self" #\, #\Space "x" #\) #\: #\Space "return" #\Space "Not" #\( "x" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "implies" #\( "self" #\, #\Space "x" #\, #\Space "y" #\) #\: #\Space "return" #\Space "Implies" #\( "x" #\, "y" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "This" #\Space "function" #\Space "assumes" #\Space "x" #\Space "and" #\Space "y" #\Space "to" #\Space "be" #\Space "numbers"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "Qx" #\( "self" #\, #\Space "x" #\, #\Space "y" #\) #\: #\Space "return" #\Space "Q" #\( "x" #\, "y" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "type" #\Space "related" #\Space "functions"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "integerp" #\( "self" #\, #\Space "x" #\) #\: #\Space "return" #\Space "x" #\. "sort" #\( #\) #\Space "=" "=" #\Space "IntSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "rationalp" #\( "self" #\, #\Space "x" #\) #\: #\Space "return" #\Space "x" #\. "sort" #\( #\) #\Space "=" "=" #\Space "RealSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "booleanp" #\( "self" #\, #\Space "x" #\) #\: #\Space "return" #\Space "x" #\. "sort" #\( #\) #\Space "=" "=" #\Space "BoolSort" #\( #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "ifx" #\( "self" #\, #\Space "condx" #\, #\Space "thenx" #\, #\Space "elsex" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "v" #\Space "=" #\Space "0"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space "sort" #\( "thenx" #\) #\Space "=" "=" #\Space "sort" #\( "elsex" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space "sort" #\( "thenx" #\) #\Space "=" "=" #\Space "BoolSort" #\( #\) #\: #\Space "v" #\Space "=" #\Space "Bool" #\( "self" #\. "newVar" #\( #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space "sort" #\( "thenx" #\) #\Space "=" "=" #\Space "IntSort" #\( #\) #\: #\Space #\Space "v" #\Space "=" #\Space "Int" #\( "self" #\. "newVar" #\( #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space "sort" #\( "thenx" #\) #\Space "=" "=" #\Space "RealSort" #\( #\) #\: #\Space "v" #\Space "=" #\Space "Real" #\( "self" #\. "newVar" #\( #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space "v" #\Space "is" #\Space "0" #\: #\Space "raise" #\Space "Exception" #\( #\' "mixed" #\Space "type" #\Space "for" #\Space "if" "-" "expression" #\' #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "solver" #\. "add" #\( "And" #\( "Implies" #\( "condx" #\, #\Space "v" #\Space "=" "=" #\Space "thenx" #\) #\, #\Space "Implies" #\( "Not" #\( "condx" #\) #\, #\Space "v" #\Space "=" "=" #\Space "elsex" #\) #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\( "v" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\# #\Space "array"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "def" #\Space "array" #\( "self" #\, #\Space "mylist" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space #\Space #\Space "if" #\Space "not" #\Space "mylist" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "raise" #\( #\" "Can" #\' "t" #\Space "determine" #\Space "type" #\Space "of" #\Space "an" #\Space "empty" #\Space "list" #\. #\" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "ty" #\Space "=" #\Space "sort" #\( "mylist" "[" "0" "]" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "a" #\Space "=" #\Space "Array" #\( "self" #\. "newVar" #\( #\) #\, #\Space "IntSort" #\( #\) #\, #\Space "ty" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "n" #\Space "=" #\Space "len" #\( "mylist" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "for" #\Space "i" #\Space "in" #\Space "range" #\( "0" #\, "n" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "j" #\Space "=" #\Space "Int" #\( "self" #\. "newVar" #\( #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "solver" #\. "add" #\( "j" #\Space "=" "=" #\Space "i" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "solver" #\. "add" #\( "Select" #\( "a" #\, #\Space "j" #\) #\Space "=" "=" #\Space "mylist" "[" "i" "]" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space #\Space #\Space "return" #\Space "a"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\# #\Space "nth"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "def" #\Space "nth" #\( "self" #\, #\Space "i" #\, #\Space "a" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space #\Space #\Space "return" #\Space "Select" #\( "a" #\, #\Space "i" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "usage" #\Space "prove" #\( "claim" #\) #\Space "or" #\Space "prove" #\( "hypotheses" #\, #\Space "conclusion" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "prove" #\( "self" #\, #\Space "hypotheses" #\, #\Space "conclusion" "=" "0" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "conclusion" #\Space "is" #\Space "0" #\) #\: #\Space "claim" #\Space "=" #\Space "hypotheses"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "claim" #\Space "=" #\Space "Implies" #\( "hypotheses" #\, #\Space "conclusion" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "solver" #\. "add" #\( "Not" #\( "claim" #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "res" #\Space "=" #\Space "self" #\. "solver" #\. "check" #\( #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space "res" #\Space "=" "=" #\Space "unsat" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "print" #\Space #\" "proved" #\"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "self" #\. "status" #\( "True" #\) #\Space #\Space #\# #\Space "It" #\' "s" #\Space "a" #\Space "theorem"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\Space "res" #\Space "=" "=" #\Space "sat" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "print" #\Space #\" "counterexample" #\"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "m" #\Space "=" #\Space "self" #\. "solver" #\. "model" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "print" #\Space "m"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "return" #\Space "an" #\Space "counterexample" "?" "?"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "self" #\. "status" #\( "False" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "print" #\Space #\" "failed" #\Space "to" #\Space "prove" #\"  #\Newline )
))