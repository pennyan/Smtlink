from sys import path
path.insert(0,"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/z3_interface")
from ACL2_translator import to_smt, Q
s = to_smt()
EXPT_GAMMA_2_MINUS_2N=s.isReal("EXPT_GAMMA_2_MINUS_2N")
EXPT_GAMMA_1=s.isReal("EXPT_GAMMA_1")
EXPT_GAMMA_2=s.isReal("EXPT_GAMMA_2")
EXPT_GAMMA_2N_MINUS_2=s.isReal("EXPT_GAMMA_2N_MINUS_2")
EXPT_GAMMA_2N_MINUS_1=s.isReal("EXPT_GAMMA_2N_MINUS_1")
EXPT_GAMMA_2N=s.isReal("EXPT_GAMMA_2N")
N=s.isReal("N")
G1=s.isReal("G1")
V0=s.isReal("V0")
hypothesis=s.ifx(s.lt(0,EXPT_GAMMA_2N_MINUS_2),s.ifx(s.notx(s.lt(N,3)),s.ifx(s.equal(G1,Q(1,3200)),s.ifx(s.notx(s.lt(V0,Q(9,10))),s.notx(s.lt(Q(11,10),V0)),False),False),False),False)
conclusion=s.implies(s.lt(s.plus(s.times(EXPT_GAMMA_2,s.plus(False,s.negate(False))),s.plus(s.times(EXPT_GAMMA_1,s.plus(False,s.negate(False))),s.plus(s.times(EXPT_GAMMA_2_MINUS_2N,s.plus(-1,s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,V0))),s.reciprocal(s.plus(1,s.times(1,s.plus(s.times(G1,s.plus(-1,N)),(lambda var16:s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,var16))),s.negate(s.times(1,s.reciprocal(1)))))(V0)))))))),s.plus(-1,s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,V0))),s.reciprocal(s.plus(1,s.times(1,s.plus(s.times(G1,s.plus(1,s.negate(N))),(lambda var17:s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,var17))),s.negate(s.times(1,s.reciprocal(1)))))(V0)))))))))),0),s.lt(s.times(EXPT_GAMMA_2N_MINUS_2,s.plus(s.times(EXPT_GAMMA_2,s.plus(False,s.negate(False))),s.plus(s.times(EXPT_GAMMA_1,s.plus(False,s.negate(False))),s.plus(s.times(EXPT_GAMMA_2_MINUS_2N,s.plus(-1,s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,V0))),s.reciprocal(s.plus(1,s.times(1,s.plus(s.times(G1,s.plus(-1,N)),(lambda var34:s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,var34))),s.negate(s.times(1,s.reciprocal(1)))))(V0)))))))),s.plus(-1,s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,V0))),s.reciprocal(s.plus(1,s.times(1,s.plus(s.times(G1,s.plus(1,s.negate(N))),(lambda var35:s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,var35))),s.negate(s.times(1,s.reciprocal(1)))))(V0))))))))))),0))
s.prove(hypothesis, conclusion)
