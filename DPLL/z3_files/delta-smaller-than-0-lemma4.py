from sys import path
path.insert(0,"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/z3_interface")
from ACL2_translator import to_smt, Q
s = to_smt()
EXPT_GAMMA_1=s.isReal("EXPT_GAMMA_1")
EXPT_GAMMA_2=s.isReal("EXPT_GAMMA_2")
N=s.isReal("N")
DC=s.isReal("DC")
G1=s.isReal("G1")
V0=s.isReal("V0")
DV=s.isReal("DV")
hypothesis=s.ifx(s.equal(EXPT_GAMMA_2,Q(1,25)),s.ifx(s.equal(EXPT_GAMMA_1,Q(1,5)),s.ifx(s.notx(s.lt(N,3)),s.ifx(s.notx(s.lt(640,N)),s.ifx(s.notx(s.lt(DC,0)),s.ifx(s.lt(DC,1),s.ifx(s.equal(G1,Q(1,3200)),s.ifx(s.notx(s.lt(V0,Q(9,10))),s.ifx(s.notx(s.lt(Q(11,10),V0)),s.ifx(s.notx(s.lt(DV,s.negate(s.times(-2,Q(-1,16000))))),s.notx(s.lt(s.times(-2,Q(-1,16000)),DV)),False),False),False),False),False),False),False),False),False),False)
conclusion=s.lt(s.times(s.plus(s.times(EXPT_GAMMA_2,s.plus((lambda var0,var1,var2,var3,var4:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,s.plus(var1,var2)))),s.reciprocal(s.plus(1,s.times(1,s.times(s.plus(var0,var4),var3))))))(s.plus(-1,(lambda var5,var6,var7:s.plus(s.times((lambda var8:s.plus(s.times(1,s.times(s.plus(1,s.times(1,var8)),s.reciprocal(s.times(1,s.times(1,1))))),s.negate(s.reciprocal(1))))(var6),s.reciprocal(var7)),s.negate(var5)))(N,V0,G1)),V0,DV,G1,DC),s.negate((lambda var9,var10,var11,var12,var13:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,s.plus(var10,var11)))),s.reciprocal(s.plus(1,s.times(1,s.times(s.plus(var9,var13),var12))))))((lambda var14,var15,var16:s.plus(s.times((lambda var17:s.plus(s.times(1,s.times(s.plus(1,s.times(1,var17)),s.reciprocal(s.times(1,s.times(1,1))))),s.negate(s.reciprocal(1))))(var15),s.reciprocal(var16)),s.negate(var14)))(N,V0,G1),V0,DV,G1,DC)))),s.plus(s.times(EXPT_GAMMA_1,s.plus((lambda var18,var19,var20,var21,var22:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,s.plus(var19,var20)))),s.reciprocal(s.plus(1,s.times(1,s.times(s.plus(var18,var22),var21))))))((lambda var23,var24,var25:s.plus(s.times((lambda var26:s.plus(s.times(1,s.times(s.plus(1,s.times(1,var26)),s.reciprocal(s.times(1,s.times(1,1))))),s.negate(s.reciprocal(1))))(var24),s.reciprocal(var25)),s.negate(var23)))(N,V0,G1),V0,DV,G1,DC),s.negate((lambda var27,var28,var29,var30,var31:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,s.plus(var28,var29)))),s.reciprocal(s.plus(1,s.times(1,s.times(s.plus(var27,var31),var30))))))(s.plus(1,(lambda var32,var33,var34:s.plus(s.times((lambda var35:s.plus(s.times(1,s.times(s.plus(1,s.times(1,var35)),s.reciprocal(s.times(1,s.times(1,1))))),s.negate(s.reciprocal(1))))(var33),s.reciprocal(var34)),s.negate(var32)))(N,V0,G1)),V0,DV,G1,DC)))),s.plus(-1,s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,s.plus(V0,DV)))),s.reciprocal(s.plus(1,s.times(1,s.plus(s.times(G1,s.plus(s.plus(1,s.negate(N)),DC)),(lambda var36:s.plus(s.times(1,s.times(s.plus(1,s.times(1,var36)),s.reciprocal(s.times(1,s.times(1,1))))),s.negate(s.reciprocal(1))))(V0))))))))),s.reciprocal(s.plus(1,s.negate(s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,s.plus(V0,DV)))),s.reciprocal(s.plus(1,s.times(1,s.plus(s.times(G1,s.plus(s.plus(-1,N),DC)),(lambda var37:s.plus(s.times(1,s.times(s.plus(1,s.times(1,var37)),s.reciprocal(s.times(1,s.times(1,1))))),s.negate(s.reciprocal(1))))(V0)))))))))),s.times(2,N))
s.prove(hypothesis, conclusion)
