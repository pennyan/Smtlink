from sys import path
path.insert(0,"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/z3_interface")
from ACL2_translator import to_smt, Q
s = to_smt()
EXPT_GAMMA_2=s.isReal("EXPT_GAMMA_2")
EXPT_GAMMA_2N_MINUS_3=s.isReal("EXPT_GAMMA_2N_MINUS_3")
EXPT_GAMMA_2N_MINUS_2=s.isReal("EXPT_GAMMA_2N_MINUS_2")
EXPT_GAMMA_2N_MINUS_1=s.isReal("EXPT_GAMMA_2N_MINUS_1")
EXPT_GAMMA_2N=s.isReal("EXPT_GAMMA_2N")
EXPT_GAMMA_2N_PLUS_1=s.isReal("EXPT_GAMMA_2N_PLUS_1")
N=s.isReal("N")
hypothesis=s.ifx(s.notx(s.lt(N,4)),s.ifx(s.notx(s.lt(PHI0,0)),s.lt(PHI0,s.plus(-1,(lambda var0:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,1))),s.reciprocal(s.plus(1,s.times(1,s.times(var0,Q(1,3200)))))))(s.plus(1,(lambda var1:s.plus(s.times(s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,1))),s.negate(s.times(1,s.reciprocal(1)))),s.reciprocal(Q(1,3200))),s.negate(var1)))(N))))),False),False)
conclusion=s.equal(s.plus(s.times(EXPT_GAMMA_2N_PLUS_1,PHI0),s.plus(s.times(EXPT_GAMMA_2N,s.plus(-1,(lambda var2:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,1))),s.reciprocal(s.plus(1,s.times(1,s.times(var2,Q(1,3200)))))))(s.plus(-1,(lambda var3:s.plus(s.times(s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,1))),s.negate(s.times(1,s.reciprocal(1)))),s.reciprocal(Q(1,3200))),s.negate(var3)))(N))))),s.times(EXPT_GAMMA_2N_MINUS_1,s.plus(-1,(lambda var4:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,1))),s.reciprocal(s.plus(1,s.times(1,s.times(var4,Q(1,3200)))))))((lambda var5:s.plus(s.times(s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,1))),s.negate(s.times(1,s.reciprocal(1)))),s.reciprocal(Q(1,3200))),s.negate(var5)))(N)))))),s.plus(s.times(s.plus(s.times(EXPT_GAMMA_2N_MINUS_1,PHI0),s.plus(s.times(EXPT_GAMMA_2N_MINUS_2,s.plus(-1,(lambda var6:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,1))),s.reciprocal(s.plus(1,s.times(1,s.times(var6,Q(1,3200)))))))((lambda var7:s.plus(s.times(s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,1))),s.negate(s.times(1,s.reciprocal(1)))),s.reciprocal(Q(1,3200))),s.negate(var7)))(N)))),s.times(EXPT_GAMMA_2N_MINUS_3,s.plus(-1,(lambda var8:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,1))),s.reciprocal(s.plus(1,s.times(1,s.times(var8,Q(1,3200)))))))(s.plus(1,(lambda var9:s.plus(s.times(s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,1))),s.negate(s.times(1,s.reciprocal(1)))),s.reciprocal(Q(1,3200))),s.negate(var9)))(N))))))),EXPT_GAMMA_2),s.plus(s.plus(s.times(EXPT_GAMMA_2N,s.plus(-1,(lambda var10:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,1))),s.reciprocal(s.plus(1,s.times(1,s.times(var10,Q(1,3200)))))))(s.plus(-1,(lambda var11:s.plus(s.times(s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,1))),s.negate(s.times(1,s.reciprocal(1)))),s.reciprocal(Q(1,3200))),s.negate(var11)))(N))))),s.negate(s.times(EXPT_GAMMA_2N,s.plus(-1,(lambda var12:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,1))),s.reciprocal(s.plus(1,s.times(1,s.times(var12,Q(1,3200)))))))((lambda var13:s.plus(s.times(s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,1))),s.negate(s.times(1,s.reciprocal(1)))),s.reciprocal(Q(1,3200))),s.negate(var13)))(N)))))),s.plus(s.times(EXPT_GAMMA_2N_MINUS_1,s.plus(-1,(lambda var14:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,1))),s.reciprocal(s.plus(1,s.times(1,s.times(var14,Q(1,3200)))))))((lambda var15:s.plus(s.times(s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,1))),s.negate(s.times(1,s.reciprocal(1)))),s.reciprocal(Q(1,3200))),s.negate(var15)))(N)))),s.negate(s.times(EXPT_GAMMA_2N_MINUS_1,s.plus(-1,(lambda var16:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,1))),s.reciprocal(s.plus(1,s.times(1,s.times(var16,Q(1,3200)))))))(s.plus(1,(lambda var17:s.plus(s.times(s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,1))),s.negate(s.times(1,s.reciprocal(1)))),s.reciprocal(Q(1,3200))),s.negate(var17)))(N))))))))))
s.prove(hypothesis, conclusion)
