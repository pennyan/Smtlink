from sys import path
path.insert(0,"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/z3_interface")
from ACL2_translator import to_smt, Q
s = to_smt()
N_MINUS_2=s.isReal("N_MINUS_2")
G1=s.isReal("G1")
V0=s.isReal("V0")
PHI0=s.isReal("PHI0")
hypothesis=s.ifx(s.notx(s.lt(N_MINUS_2,2)),s.ifx(s.equal(G1,Q(1,3200)),s.ifx(s.notx(s.lt(V0,Q(9,10))),s.ifx(s.notx(s.lt(Q(11,10),V0)),s.ifx(s.notx(s.lt(PHI0,0)),s.lt(PHI0,s.plus(-1,(lambda var0,var1,var2:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,var1))),s.reciprocal(s.plus(1,s.times(1,s.times(var0,var2))))))(s.plus(1,(lambda var3,var4,var5:s.plus(s.times((lambda var6:s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,var6))),s.negate(s.times(1,s.reciprocal(1)))))(var4),s.reciprocal(var5)),s.negate(var3)))(s.plus(N_MINUS_2,2),V0,G1)),V0,G1))),False),False),False),False),False)
conclusion=s.ifx(s.lt(PHI0,s.plus(-1,(lambda var7,var8,var9:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,var8))),s.reciprocal(s.plus(1,s.times(1,s.times(var7,var9))))))(s.plus(1,(lambda var10,var11,var12:s.plus(s.times((lambda var13:s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,var13))),s.negate(s.times(1,s.reciprocal(1)))))(var11),s.reciprocal(var12)),s.negate(var10)))(s.plus(-1,s.plus(N_MINUS_2,2)),V0,G1)),V0,G1))),s.ifx(s.lt(0,s.plus(-1,(lambda var14,var15,var16:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,var15))),s.reciprocal(s.plus(1,s.times(1,s.times(var14,var16))))))(s.plus(1,(lambda var17,var18,var19:s.plus(s.times((lambda var20:s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,var20))),s.negate(s.times(1,s.reciprocal(1)))))(var18),s.reciprocal(var19)),s.negate(var17)))(s.plus(N_MINUS_2,2),V0,G1)),V0,G1))),s.lt(0,s.plus(-1,(lambda var21,var22,var23:s.times(s.times(s.times(1,s.reciprocal(s.times(1,1))),s.plus(1,s.times(1,var22))),s.reciprocal(s.plus(1,s.times(1,s.times(var21,var23))))))(s.plus(1,(lambda var24,var25,var26:s.plus(s.times((lambda var27:s.plus(s.times(s.times(1,s.reciprocal(s.times(1,s.times(1,1)))),s.plus(1,s.times(1,var27))),s.negate(s.times(1,s.reciprocal(1)))))(var25),s.reciprocal(var26)),s.negate(var24)))(s.plus(-1,s.plus(N_MINUS_2,2)),V0,G1)),V0,G1))),False),False)
s.prove(hypothesis, conclusion)
