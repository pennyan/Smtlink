(in-package "SMT")
(include-book "SMT-translator")
(define ACL22SMT ()
  :returns (class-content paragraphp)
  (list
    (list #\# #\Space "Copyright" #\Space #\( "C" #\) #\Space "2015" #\, #\Space "University" #\Space "of" #\Space "British" #\Space "Columbia"  #\Newline )
    (list #\# #\Space "Written" #\Space #\( "originally" #\) #\Space "by" #\Space "Mark" #\Space "Greenstreet" #\Space #\( "13th" #\Space "March" #\, #\Space "2014" #\)  #\Newline )
    (list #\# #\Space "Editted" #\Space "by" #\Space "Yan" #\Space "Peng" #\Space #\( "11th" #\Space "Nov" #\. #\Space "2016" #\)  #\Newline )
    (list #\#  #\Newline )
    (list #\# #\Space "License" #\: #\Space "A" #\Space "3" "-" "clause" #\Space "BSD" #\Space "license" #\.  #\Newline )
    (list #\# #\Space "See" #\Space "the" #\Space "LICENSE" #\Space "file" #\Space "distributed" #\Space "with" #\Space "this" #\Space "software"  #\Newline )
    (list  #\Newline )
    (list "import" #\Space "collections"  #\Newline )
    (list "import" #\Space "ACL2_to_Z3"  #\Newline )
    (list "import" #\Space "z3"  #\Newline )
    (list  #\Newline )
    (list "def" #\Space "prod" #\( "stuff" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\" #\" #\" #\Space "prod" #\( "stuff" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "compute" #\Space "the" #\Space "product" #\Space #\( "i" #\. "e" #\. #\Space "reduce" #\Space "with" #\Space #\' "*" #\' #\) #\Space "of" #\Space "the" #\Space "elements" #\Space "of" #\Space #\' "stuff" #\' #\.  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\' "stuff" #\' #\Space "must" #\Space "be" #\Space "iterable" #\. #\" #\" #\"  #\Newline )
    (list #\Space #\Space #\Space #\Space "return" #\Space "reduce" #\( "lambda" #\Space "x" #\, #\Space "y" #\: #\Space "x" "*" "y" #\, #\Space "stuff" #\)  #\Newline )
    (list  #\Newline )
    (list "def" #\Space "longVal" #\( "x" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\" #\" #\" #\Space "longVal" #\( "x" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space #\' "x" #\' #\Space "is" #\Space "a" #\Space "z3" #\Space "constant" #\Space #\( "i" #\. "e" #\. #\Space "function" #\Space "of" #\Space "arity" #\Space "0" #\) #\Space "whose" #\Space "value" #\Space "is" #\Space "an" #\Space "integer" #\,  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "then" #\Space "return" #\Space "that" #\Space "integer" #\Space "as" #\Space "an" #\Space "python" #\Space "long"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\Space "return" #\Space #\' "None" #\' #\" #\" #\"  #\Newline )
    (list #\Space #\Space #\Space #\Space "if" #\( "hasattr" #\( "x" #\, #\Space #\' "as_long" #\' #\) #\) #\: #\Space "return" #\Space "x" #\. "as_long" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "elif" #\( "hasattr" #\( "x" #\, #\Space #\' "numerator_as_long" #\' #\) #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "x" #\. "denominator_as_long" #\( #\) #\Space "=" "=" #\Space "1L" #\) #\: #\Space "return" #\Space "x" #\. "numerator_as_long" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "return" #\Space "None"  #\Newline )
    (list #\# #\Space "end" #\Space "longVal"  #\Newline )
    (list  #\Newline )
    (list "class" #\Space "to_smt_w_expt" #\( "ACL2_to_Z3" #\. "ACL22SMT" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space "class" #\Space "ExptRewriteFailure" #\( "Exception" #\) #\: #\Space "pass"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "__init__" #\( "self" #\, #\Space "*" "args" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "super" #\( "to_smt_w_expt" #\, #\Space "self" #\) #\. "__init__" #\( "*" "args" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "I" #\' "m" #\Space "making" #\Space "the" #\Space "exponent" #\Space "have" #\Space "sort" #\Space "Real" #\Space "instead" #\Space "of" #\Space "Int" #\Space "because"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "the" #\Space "translator" #\Space "turns" #\Space "integerp" #\Space "to" #\Space "isReal" "!" #\Space #\Space "That" #\' "s" #\Space "because" #\Space "the" #\Space "z3"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "solver" #\Space #\( "understandably" #\) #\Space "chokes" #\Space "on" #\Space "mixed" #\Space "integer" "/" "real" #\Space "polynomials" #\.  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "expt" #\Space "=" #\Space "z3" #\. "Function" #\( #\' "expt" #\' #\, #\Space "z3" #\. "RealSort" #\( #\) #\, #\Space "z3" #\. "RealSort" #\( #\) #\, #\Space "z3" #\. "RealSort" #\( #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "b_sum" #\Space "=" #\Space "z3" #\. "Function" #\( #\' "b_sum" #\' #\, #\Space "z3" #\. "RealSort" #\( #\) #\, #\Space "z3" #\. "RealSort" #\( #\) #\, #\Space "z3" #\. "RealSort" #\( #\) #\, #\Space "z3" #\. "RealSort" #\( #\) #\, #\Space "z3" #\. "RealSort" #\( #\) #\, #\Space "z3" #\. "RealSort" #\( #\) #\, #\Space "z3" #\. "RealSort" #\( #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "b_expt" #\Space "=" #\Space "z3" #\. "Function" #\( #\' "b_expt" #\' #\, #\Space "z3" #\. "RealSort" #\( #\) #\, #\Space "z3" #\. "RealSort" #\( #\) #\, #\Space "z3" #\. "RealSort" #\( #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "maxPowExpand" #\Space "=" #\Space "10"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "simplify" #\( "self" #\, #\Space "expr" #\, #\Space "*" "*" "kwargs" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "z3" #\. "is_expr" #\( "expr" #\) #\) #\: #\Space "return" #\Space "z3" #\. "simplify" #\( "expr" #\, #\Space "*" "*" "kwargs" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space #\# #\Space "assume" #\Space "that" #\Space "expr" #\Space "has" #\Space "already" #\Space "been" #\Space #\' "simplified" #\' #\Space "to" #\Space "a" #\Space "constant" #\.  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "expr"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "reportFun" #\( "self" #\, #\Space "report" "=" "None" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "print_msg" #\( "*" "args" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "print" #\Space #\' #\' #\. "join" #\( "[" "str" #\( "a" #\) #\Space "for" #\Space "a" #\Space "in" #\Space "args" "]" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "None"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "dont_print_msg" #\( "*" "args" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "None"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( #\( "report" #\Space "is" #\Space "None" #\) #\Space "or" #\Space #\( "report" #\Space "is" #\Space "False" #\) #\) #\: #\Space "return" #\Space "dont_print_msg"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "report" #\Space "is" #\Space "True" #\) #\: #\Space "return" #\Space "print_msg"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "return" #\Space "report"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "get_expt_rules" #\( "self" #\, #\Space "expr_list" #\, #\Space "report" "=" "None" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "len" #\( "expr_list" #\) #\Space "=" "=" #\Space "0" #\) #\: #\Space "return" #\Space "[" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "hyps" #\Space "=" #\Space "expr_list" "[" "0" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "workQ" #\Space "=" #\Space "collections" #\. "deque" #\( #\) #\Space #\Space #\# #\Space "expt" #\Space "calls" #\Space "we" #\Space "still" #\Space "need" #\Space "to" #\Space "examine"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "allQ" #\Space "=" #\Space "collections" #\. "deque" #\( #\) #\Space #\Space #\Space #\# #\Space "all" #\Space "expt" #\Space "calls" #\Space "that" #\Space "we" #\' "ve" #\Space "seen"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\Space "=" #\Space "self" #\. "reportFun" #\( "report" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "enqueue" #\( "v" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "z3" #\Space "ASTs" #\Space "are" #\Space "unhashable" ";" #\Space "so" #\Space "we" #\' "ll" #\Space "use" #\Space "a" #\Space "brute" "-" "force"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space "list" #\Space "for" #\Space "now" #\Space "-" "-" #\Space "beware" #\Space "of" #\Space "the" #\Space "quadratic" #\Space "time" #\Space "to" #\Space "build" #\Space "the"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space "allQ" #\Space "and" #\Space "workQ" #\Space "lists" #\Space "if" #\Space "we" #\Space "ever" #\Space "work" #\Space "on" #\Space "big" #\Space "examples" #\.  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\( #\' "enque" #\( #\' #\, #\Space "v" #\, #\Space #\' #\) #\' #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "for" #\Space "w" #\Space "in" #\Space "allQ" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "v" #\. "eq" #\( "w" #\) #\) #\: #\Space #\Space #\# #\Space "have" #\Space "we" #\Space "already" #\Space "seen" #\Space "v" #\Space "?"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\( #\' #\Space #\Space "already" #\Space "seen" #\, #\Space "no" #\Space "work" #\Space "to" #\Space "do" #\' #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\( #\' #\Space #\Space "appending" #\Space #\' #\, #\Space "v" #\, #\Space #\' #\Space "to" #\Space "allQ" #\Space "and" #\Space "workQ" #\' #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "allQ" #\. "append" #\( "v" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "workQ" #\. "append" #\( "v" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "xpt" #\( "x" #\, #\Space "n" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "v" #\Space "=" #\Space "self" #\. "expt" #\( "x" #\, #\Space "n" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "enqueue" #\( "v" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "v"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "lookfor_expt" #\( "v" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "v" #\Space "is" #\Space "None" #\) #\: #\Space "return"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "hasattr" #\( "v" #\, #\Space #\" "decl" #\" #\) #\Space "and" #\Space "hasattr" #\( "v" #\, #\Space #\" "children" #\" #\) #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "hopefully" #\, #\Space "v" #\Space "is" #\Space "a" #\Space "z3" #\Space "expression"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "v" #\. "decl" #\( #\) #\. "eq" #\( "self" #\. "expt" #\) #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "x" #\Space "=" #\Space "v" #\. "children" #\( #\) "[" "0" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "n" #\Space "=" #\Space "v" #\. "children" #\( #\) "[" "1" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "enqueue" #\( "self" #\. "expt" #\( "x" #\, #\Space "self" #\. "simplify" #\( "n" #\, #\Space "som" "=" "True" #\) #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "for" #\Space "nu" #\Space "in" #\Space "v" #\. "children" #\( #\) #\: #\Space "lookfor_expt" #\( "nu" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "expt_rules" #\( #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "rules" #\Space "=" #\Space "collections" #\. "deque" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "solver" #\Space "=" #\Space "z3" #\. "Solver" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "solver" #\. "set" #\( #\' "arith" #\. "nl" #\' #\, #\Space "False" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "solver" #\. "add" #\( "hyps" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "show" #\( "p" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\( #\' "trying" #\Space "to" #\Space "show" #\( #\' #\, #\Space "p" #\, #\Space #\' #\) #\: #\' #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\( #\' #\Space #\Space "hypotheses" #\Space "=" #\Space #\' #\, #\Space "solver" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "solver" #\. "push" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "solver" #\. "add" #\( "z3" #\. "Not" #\( "p" #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "outcome" #\Space "=" #\Space "solver" #\. "check" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "s1" #\Space "=" #\Space #\' #\Space #\Space "the" #\Space "negation" #\Space "is" #\Space #\' #\Space "+" #\Space "str" #\( "outcome" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "outcome" #\Space "=" "=" #\Space "z3" #\. "unsat" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\( "s1" #\, #\Space #\" ";" #\Space "therefore" #\Space "the" #\Space "original" #\Space "claim" #\Space "is" #\Space "valid" #\" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "outcome" #\Space "=" "=" #\Space "z3" #\. "sat" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\( "s1" #\, #\Space #\" #\\ "n" #\Space #\Space "here" #\' "s" #\Space "a" #\Space "counter" "-" "example" #\Space "to" #\Space #\" #\, #\Space "p" #\, #\Space #\" #\\ "n" #\Space #\Space #\" #\, #\Space "solver" #\. "model" #\( #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "outcome" #\Space "=" "=" #\Space "z3" #\. "unknown" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\( "s1" #\, #\Space #\" ";" #\Space "therefore" #\, #\Space "the" #\Space "original" #\Space "claim" #\Space "is" #\Space "undecided" #\" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\( "s1" #\, #\Space #\" ";" #\Space "how" #\' "d" #\Space "that" #\Space "happen" "?" #\" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "solver" #\. "pop" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "outcome" #\Space "=" "=" #\Space "z3" #\. "unsat"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "add_rule" #\( "p" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\( #\' "add_rule" #\( #\' #\, #\Space "p" #\, #\Space #\' #\) #\' #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "rules" #\. "append" #\( "p" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "solver" #\. "add" #\( "p" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "while" #\( "len" #\( "workQ" #\) #\Space ">" #\Space "0" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "v" #\Space "=" #\Space "workQ" #\. "pop" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "x" #\Space "=" #\Space "v" #\. "children" #\( #\) "[" "0" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "n" #\Space "=" #\Space "v" #\. "children" #\( #\) "[" "1" "]"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\( #\' "rewriting" #\Space "expt" #\( #\' #\, #\Space "x" #\, #\Space #\' #\, #\Space #\' #\, #\Space "n" #\, #\Space #\' #\) #\' #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "Many" #\Space "of" #\Space "the" #\Space "rules" #\Space "below" #\Space "should" #\Space "have" #\Space "guards" #\Space "to" #\Space "ensure" #\Space "that" #\Space "we" #\Space "don" #\' "t"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "accidentally" #\Space "say" #\Space "expt" #\( "x" #\, #\Space "n" #\) #\Space "is" #\Space "defined" #\Space "when" #\Space "x" "=" "=" "0" #\Space "and" #\Space "n" #\Space "<" #\Space "0" #\.  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "Rather" #\Space "that" #\Space "figuring" #\Space "out" #\Space #\# #\Space "all" #\Space "of" #\Space "the" #\Space "corner" #\Space "cases" #\, #\Space "I" #\Space "first" #\Space "check" #\Space "to"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "see" #\Space "if" #\Space #\( "x" #\Space "=" "=" #\Space "0" #\) #\Space "and" #\Space #\( "n" #\Space "<" #\Space "0" #\) #\Space "is" #\Space "satisfiable" #\. #\Space #\Space "If" #\Space "so" #\, #\Space "this" #\Space "code" #\Space "just"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "throws" #\Space "an" #\Space "exception" #\. #\Space #\Space "I" #\Space "could" #\Space "probably" #\Space "work" #\Space "out" #\Space "a" #\Space "better" #\Space "error" #\Space "message"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "later" #\.  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space "Now" #\Space "that" #\Space "we" #\Space "know" #\Space "that" #\Space "expt" #\( "x" #\, #\Space "n" #\) #\Space "is" #\Space "well" "-" "defined" #\, #\Space "we" #\Space "still" #\Space "need" #\Space "to" #\Space "be" #\Space "careful" #\.  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "Consider" #\Space "expt" #\( "x" #\, #\Space "n" "+" "m" #\) #\Space "where" #\Space "x" "=" "=" "0" #\, #\Space "n" "=" "=" "3" #\, #\Space "and" #\Space "m" "=" "=" #\( "-" "2" #\) #\. #\Space #\Space "In" #\Space "this" #\Space "case" #\, #\Space "expt" #\( "x" #\, #\Space "n" "+" "m" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "is" #\Space "well" "-" "defined" #\, #\Space "but" #\Space "we" #\Space "can" #\' "t" #\Space "conclude" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space #\Space "expt" #\( "x" #\, #\Space "n" "+" "m" #\) #\Space "=" "=" #\Space "expt" #\( "x" #\, #\Space "n" #\) #\Space "*" #\Space "expt" #\( "x" #\, #\Space "m" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "Rather" #\Space "than" #\Space "working" #\Space "out" #\Space "lots" #\Space "of" #\Space "side" #\Space "conditions" #\Space #\( "and" #\Space "probably" #\Space "making" #\Space "a" #\Space "mistake" #\) #\,  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "I" #\Space "just" #\Space "check" #\Space "to" #\Space "see" #\Space "if" #\Space "implies" #\( "hyps" #\, #\Space "x" #\Space ">" #\Space "0" #\) #\, #\Space "and" #\Space "then" #\Space "plunge" #\Space "ahead" #\Space "without" #\Space "fear" #\.  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "Of" #\Space "course" #\, #\Space "this" #\Space "means" #\Space "I" #\Space "don" #\' "t" #\Space "generate" #\Space "all" #\Space "of" #\Space "the" #\Space "rules" #\Space "that" #\Space "I" #\Space "could" #\, #\Space "but" #\Space "I" #\' "ll"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "do" #\Space "that" #\Space "later" #\Space "if" #\Space "this" #\Space "simple" #\Space "version" #\Space "turns" #\Space "out" #\Space "to" #\Space "be" #\Space "useful" #\.  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "expt_rewrite_const" #\( "x2" #\, #\Space "n2" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "n2" #\Space "=" "=" #\Space "0" #\) #\: #\Space "return" #\Space "z3" #\. "intVal" #\( "1" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( #\( "0" #\Space "<" #\Space "n2" #\) #\Space "and" #\Space #\( "n2" #\Space "<" "=" #\Space "self" #\. "maxPowExpand" #\) #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "add_rule" #\( "v" #\Space "=" "=" #\Space "prod" #\( "map" #\( "lambda" #\Space "_" #\: #\Space "x2" #\, #\Space "range" #\( "n2" #\) #\) #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( #\( "-" "self" #\. "maxPowExpand" #\Space "<" "=" #\Space "n2" #\) #\Space "and" #\Space #\( "n2" #\Space "<" #\Space "0" #\) #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "add_rule" #\( "v" "*" "prod" #\( "map" #\( "lambda" #\Space "_" #\: #\Space "x2" #\, #\Space "range" #\( "-" "n2" #\) #\) #\) #\Space "=" "=" #\Space "1" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "not" #\Space "show" #\( "z3" #\. "Or" #\( "x" #\Space "!" "=" #\Space "0" #\, #\Space "n" #\Space ">" "=" #\Space "0" #\) #\) #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "raise" #\Space "ExptRewriteFailure" #\( #\' "possible" #\Space "attempt" #\Space "to" #\Space "raise" #\Space "0" #\Space "to" #\Space "a" #\Space "negative" #\Space "power" #\' #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "x_is_pos" #\Space "=" #\Space "show" #\( "x" #\Space ">" #\Space "0" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "x_is_nz" #\Space #\Space "=" #\Space "x_is_pos" #\Space "or" #\Space "show" #\( "x" #\Space "!" "=" #\Space "0" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "x_is_z" #\Space #\Space #\Space "=" #\Space #\( "not" #\Space "x_is_nz" #\) #\Space "and" #\Space "show" #\( "x" #\Space "=" "=" #\Space "0" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "n_is_pos" #\Space "=" #\Space "show" #\( "n" #\Space ">" #\Space "0" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "n_is_neg" #\Space "=" #\Space #\( "not" #\Space "n_is_pos" #\) #\Space "and" #\Space "show" #\( "n" #\Space "<" #\Space "0" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "n_is_z" #\Space #\Space #\Space "=" #\Space #\( "not" #\Space "n_is_pos" #\) #\Space "and" #\Space #\( "not" #\Space "n_is_neg" #\) #\Space "and" #\Space "show" #\( "n" #\Space "=" "=" #\Space "0" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "n_is_z" #\Space "or" #\Space "x_is_z" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "n_is_z" #\) #\: #\Space "add_rule" #\( "v" #\Space "=" "=" #\Space "1" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "n_is_pos" #\) #\: #\Space "add_rule" #\( "v" #\Space "=" "=" #\Space "0" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "add_rule" #\( "v" #\Space "=" "=" #\Space "z3" #\. "If" #\( "n" #\Space "=" "=" #\Space "0" #\, #\Space "1" #\, #\Space "0" #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "continue"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "x_is_pos" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "x_lt_1" #\Space "=" #\Space "show" #\( "x" #\Space "<" #\Space "1" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "x_gt_1" #\Space "=" #\Space #\( "not" #\Space "x_lt_1" #\) #\Space "and" #\Space "show" #\( "x" #\Space ">" #\Space "1" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( #\( "not" #\Space "x_lt_1" #\) #\Space "and" #\Space #\( "not" #\Space "x_gt_1" #\) #\Space "and" #\Space "show" #\( "x" #\Space "=" "=" #\Space "1" #\) #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "add_rule" #\( "v" #\Space "=" "=" #\Space "1" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "continue"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "add_rule" #\( "v" #\Space ">" #\Space "0" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "add_rule" #\( "z3" #\. "Implies" #\( "x" #\Space ">" #\Space "0" #\, #\Space "v" #\Space ">" #\Space "0" #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "x_is_nz" #\) #\: #\Space "add_rule" #\( "z" #\Space "!" "=" #\Space "0" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "add_rule" #\( "z3" #\. "Implies" #\( "z3" #\. "Or" #\( "x" #\Space "!" "=" #\Space "0" #\, #\Space "n" "=" "=" "0" #\) #\, #\Space "v" #\Space "!" "=" #\Space "0" #\) #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( #\( "x" #\. "decl" #\( #\) #\. "name" #\( #\) #\Space "=" "=" #\Space #\' "*" #\' #\) #\Space "and" #\Space #\( "len" #\( "x" #\. "children" #\( #\) #\) #\Space ">" #\Space "1" #\) #\) #\: #\Space #\# #\Space "expt" #\( "x0" "*" "x1" "*" #\. #\. #\. #\, #\Space "n" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "add_rule" #\( "v" #\Space "=" "=" #\Space "prod" #\( "map" #\( "lambda" #\Space "y" #\: #\Space "xpt" #\( "y" #\, #\Space "n" #\) #\, #\Space "x" #\. "children" #\( #\) #\) #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( #\( "n" #\. "decl" #\( #\) #\. "name" #\( #\) #\Space "=" "=" #\Space #\' "+" #\' #\) #\Space "and" #\Space #\( "len" #\( "n" #\. "children" #\( #\) #\) #\Space ">" #\Space "1" #\) #\) #\: #\Space #\# #\Space "expt" #\( "x" #\, #\Space "n0" "+" "n1" "+" #\. #\. #\. #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "add_rule" #\( "v" #\Space "=" "=" #\Space "prod" #\( "map" #\( "lambda" #\Space "m" #\: #\Space "xpt" #\( "x" #\, #\Space "m" #\) #\, #\Space "n" #\. "children" #\( #\) #\) #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "n" #\. "decl" #\( #\) #\. "name" #\( #\) #\Space "=" "=" #\Space #\' "-" #\' #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "nn" #\Space "=" #\Space "n" #\. "children" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "len" #\( "nn" #\) #\Space "=" "=" #\Space "0" #\) #\: #\Space "pass" #\Space #\Space #\# #\Space "a" #\Space "variable" #\Space "named" #\Space #\' "-" #\'  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "len" #\( "nn" #\) #\Space "=" "=" #\Space "1" #\) #\: #\Space #\# #\Space "expt" #\( "x" #\, #\Space "-" "n" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "add_rule" #\( "z3" #\. "Implies" #\( "x" #\Space "!" "=" #\Space "0" #\, #\Space "v" "*" "xpt" #\( "x" #\, #\Space "nn" "[" "0" "]" #\) #\Space "=" "=" #\Space "1" #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "len" #\( "nn" #\) #\Space "=" "=" #\Space "2" #\) #\: #\Space #\# #\Space "expt" #\( "x" #\, #\Space "n" "-" "m" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "add_rule" #\( "z3" #\. "Implies" #\( "x" #\Space "!" "=" #\Space "0" #\, #\Space "v" "*" "xpt" #\( "x" #\, #\Space "nn" "[" "1" "]" #\) #\Space "=" "=" #\Space "xpt" #\( "x" #\, #\Space "nn" "[" "0" "]" #\) #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "RewriteExptFailure" #\( #\" "unexpected" #\: #\Space #\' "-" #\' #\Space "expression" #\Space "with" #\Space "more" #\Space "than" #\Space "two" #\Space "children" #\" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "n" #\. "decl" #\( #\) #\. "name" #\( #\) #\Space "=" "=" #\Space #\' "*" #\' #\) #\: #\Space #\Space #\# #\Space "expt" #\( "x" #\, #\Space "n0" "*" "n1" "*" #\. #\. #\. #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "check" #\Space "to" #\Space "see" #\Space "if" #\Space "n0" #\Space "is" #\Space "integer" #\Space "constants" #\Space "and" #\Space "not" #\Space #\" "too" #\Space "big" #\" #\.  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "if" #\Space "so" #\, #\Space "replace" #\Space "it" #\Space "with" #\Space "repeated" #\Space "multiplication"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "nn" #\Space "=" #\Space "n" #\. "children" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( #\( "len" #\( "nn" #\) #\Space ">" #\Space "0" #\) #\Space "and" #\Space "not" #\Space #\( "longVal" #\( "nn" "[" "0" "]" #\) #\Space "is" #\Space "None" #\) #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "len" #\( "nn" #\) #\Space "=" "=" #\Space "1" #\) #\: #\Space "ex" #\Space "=" #\Space "x"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "ex" #\Space "=" #\Space "xpt" #\( "x" #\, #\Space "prod" #\( "nn" "[" "1" #\: "]" #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "expt_rewrite_const" #\( "ex" #\, #\Space "longVal" #\( "nn" "[" "0" "]" #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "not" #\Space #\( "longVal" #\( "n" #\) #\Space "is" #\Space "None" #\) #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "expt_rewrite_const" #\( "x" #\, #\Space "longVal" #\( "n" #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space #\# #\Space "we" #\Space "can" #\' "t" #\Space "think" #\Space "of" #\Space "a" #\Space "way" #\Space "to" #\Space "simplify" #\Space "it"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "x_lt_1" #\Space "or" #\Space "x_gt_1" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "n_is_pos" #\Space "or" #\Space "n_is_neg" #\) #\: #\Space "pass"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "add_rule" #\( "z3" #\. "Implies" #\( "n" #\Space "=" "=" #\Space "0" #\, #\Space "v" #\Space "=" "=" #\Space "1" #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "n_is_pos" #\Space "or" #\Space "n_is_neg" #\) #\: #\Space "add_rule" #\( "z3" #\. "Implies" #\( "x" "=" "=" "1" #\, #\Space "v" #\Space "=" "=" #\Space "1" #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "add_rule" #\( "z3" #\. "Implies" #\( "z3" #\. "Or" #\( "x" "=" "=" "1" #\, #\Space "n" #\Space "=" "=" #\Space "0" #\) #\, #\Space "v" #\Space "=" "=" #\Space "1" #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "x_is_pos" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "x_lt_1" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "n_is_pos" #\) #\: #\Space "add_rule" #\( "v" #\Space "<" "=" #\Space "x" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "n_is_neg" #\) #\: #\Space "add_rule" #\( "v" "*" "x" #\Space ">" "=" #\Space "1" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "add_rule" #\( "z3" #\. "And" #\(  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "z3" #\. "Implies" #\( "n" #\Space ">" #\Space "0" #\, #\Space "v" #\Space "<" "=" #\Space "x" #\) #\,  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "z3" #\. "Implies" #\( "n" #\Space "<" #\Space "0" #\, #\Space "v" "*" "x" #\Space ">" "=" #\Space "1" #\) #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "x_gt_1" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "n_is_pos" #\) #\: #\Space "add_rule" #\( "v" #\Space ">" "=" #\Space "x" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "n_is_neg" #\) #\: #\Space "add_rule" #\( "v" "*" "x" #\Space "<" "=" #\Space "1" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "add_rule" #\( "z3" #\. "And" #\(  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "z3" #\. "Implies" #\( "n" #\Space ">" #\Space "0" #\, #\Space "v" #\Space ">" "=" #\Space "x" #\) #\,  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "z3" #\. "Implies" #\( "n" #\Space "<" #\Space "0" #\, #\Space "v" "*" "x" #\Space "<" "=" #\Space "1" #\) #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "add_rule" #\( "z3" #\. "And" #\(  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "z3" #\. "Implies" #\( "z3" #\. "And" #\( "x" #\Space "<" #\Space "1" #\, #\Space "n" #\Space ">" #\Space "0" #\) #\, #\Space "v" #\Space "<" "=" #\Space "x" #\) #\,  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "z3" #\. "Implies" #\( "z3" #\. "And" #\( "x" #\Space "<" #\Space "1" #\, #\Space "n" #\Space "<" #\Space "0" #\) #\, #\Space "v" "*" "x" #\Space ">" "=" #\Space "1" #\) #\,  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "z3" #\. "Implies" #\( "z3" #\. "And" #\( "x" #\Space ">" #\Space "1" #\, #\Space "n" #\Space ">" #\Space "0" #\) #\, #\Space "v" #\Space ">" "=" #\Space "x" #\) #\,  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "z3" #\. "Implies" #\( "z3" #\. "And" #\( "x" #\Space ">" #\Space "1" #\, #\Space "n" #\Space "<" #\Space "0" #\) #\, #\Space "v" "*" "x" #\Space "<" "=" #\Space "1" #\) #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "rules"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "end" #\Space "expt_rules"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "for" #\Space "x" #\Space "in" #\Space "expr_list" #\: #\Space "lookfor_expt" #\( "x" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "expt_rules" #\( #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "using" #\Space "z3" #\' "s" #\Space "If" #\Space "function" #\Space "is" #\Space "simpler" #\, #\Space "and" #\Space "probably" #\Space "more" #\Space "efficient"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space "than" #\Space "introducing" #\Space "a" #\Space "new" #\Space "variable" #\Space "as" #\Space "is" #\Space "done" #\Space "in" #\Space "ACL2_translator"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "ifx" #\( "self" #\, #\Space "condx" #\, #\Space "thenx" #\, #\Space "elsex" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "z3" #\. "If" #\( "condx" #\, #\Space "thenx" #\, #\Space "elsex" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "The" #\Space "ACL2" #\Space "code" #\Space "should" #\Space "access" #\Space "Q" #\Space "as" #\Space "a" #\Space "method" #\Space "of" #\Space "the" #\Space "to_smt" #\Space "object" #\Space "and" #\Space "not"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "as" #\Space "a" #\Space "separate" #\Space "method" #\. #\Space #\Space "I" #\' "m" #\Space "creating" #\Space "the" #\Space "method" #\Space "here" #\Space "so" #\Space "this" #\Space "will" #\Space "work"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "right" #\Space "when" #\Space "the" #\Space "ACL2" #\Space "code" #\Space "is" #\Space "modified" #\. #\Space #\Space "OTOH" #\, #\Space "ACL2_translator" #\Space "will" #\Space "probably"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "get" #\Space "updated" #\Space "as" #\Space "well" #\, #\Space "in" #\Space "which" #\Space "case" #\Space "this" #\Space "methods" #\Space "will" #\Space "be" #\Space "redundant"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "Q" #\( "self" #\, #\Space "numerator" #\, #\Space "denominator" #\) #\: #\Space "return" #\Space "z3" #\. "Q" #\( "numerator" #\, #\Space "denominator" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "analyse_expt" #\( "self" #\, #\Space "hypotheses" #\, #\Space "conclusion" "=" "None" #\, #\Space "report" "=" "None" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\Space "=" #\Space "self" #\. "reportFun" #\( "report" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "expt_hyps" #\Space "=" #\Space "self" #\. "get_expt_rules" #\( "[" "hypotheses" #\, #\Space "conclusion" "]" #\, #\Space "report" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "len" #\( "expt_hyps" #\) #\Space "=" "=" #\Space "0" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "hyps" #\Space "=" #\Space "hypotheses"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "concl" #\Space "=" #\Space "conclusion"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "conclusion" #\Space "is" #\Space "None" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "hyps" #\Space "=" #\Space "z3" #\. "And" #\( "*" "expt_hyps" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "concl" #\Space "=" #\Space "hypotheses"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "hyps" #\Space "=" #\Space "z3" #\. "And" #\( "hypotheses" #\, #\Space "*" "expt_hyps" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "concl" #\Space "=" #\Space "conclusion"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "simple_hyps" #\Space #\Space "=" #\Space "self" #\. "simplify" #\( "hyps" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "simple_concl" #\Space "=" #\Space "self" #\. "simplify" #\( "concl" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "simple_hyps" #\, #\Space "simple_concl"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "is" #\Space "x" #\Space "uninterpreted" #\Space "function" #\Space "instance"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "is_uninterpreted_fun" #\( "self" #\, #\Space "x" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "d" #\Space "=" #\Space "x" #\. "decl" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\(  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "all" #\( "[" "hasattr" #\( "d" #\, #\Space "a" #\) #\Space "for" #\Space "a" #\Space "in" #\Space #\( #\' "__call__" #\' #\, #\Space #\' "arity" #\' #\, #\Space #\' "domain" #\' #\, #\Space #\' "kind" #\' #\, #\Space #\' "range" #\' #\) "]" #\) #\Space "and"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\( "d" #\. "kind" #\( #\) #\Space "=" "=" #\Space "z3" #\. "Z3_OP_UNINTERPRETED" #\) #\Space "and"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "d" #\. "arity" #\( #\) #\Space ">" #\Space "0" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "I" #\' "ll" #\Space "assume" #\Space "that" #\Space "all" #\Space "arguments" #\Space "are" #\Space "z3" #\Space "expressions" #\Space "except" #\Space "for" #\Space "possibly" #\Space "the"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "last" #\Space "one" #\. #\Space #\Space "If" #\Space "the" #\Space "last" #\Space "one" #\Space "is" #\Space "a" #\Space "function" #\, #\Space "then" #\Space "it" #\' "s" #\Space "the" #\Space #\' "report" #\' #\Space "function"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "for" #\Space "debugging" #\.  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "fun_to_var" #\( "self" #\, #\Space "exprs" #\, #\Space "report" "=" "None" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\Space "=" #\Space "self" #\. "reportFun" #\( "report" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\( #\' "fun_to_var" #\( #\' #\, #\Space "exprs" #\, #\Space #\' #\, #\Space #\' #\, #\Space "report" #\, #\Space #\' #\) #\' #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "funQ" #\Space "=" #\Space "collections" #\. "deque" #\( #\) #\Space #\Space #\# #\Space "uninterpreted" #\Space "functions" #\Space "we" #\' "ve" #\Space "seen"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "helper" #\( "x" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "x" #\Space "is" #\Space "None" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "x"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "self" #\. "is_uninterpreted_fun" #\( "x" #\) #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "match" #\Space "=" #\Space "[" "f" "[" "1" "]" #\Space "for" #\Space "f" #\Space "in" #\Space "funQ" #\Space "if" #\Space "f" "[" "0" "]" #\Space "is" #\Space "x" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "len" #\( "match" #\) #\Space "=" "=" #\Space "1" #\) #\: #\Space #\Space #\# #\Space "found" #\Space "a" #\Space "match"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "match" "[" "0" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "rangeSort" #\Space "=" #\Space "x" #\. "decl" #\( #\) #\. "range" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "varName" #\Space "=" #\Space #\' "$" #\' #\Space "+" #\Space "str" #\( "x" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "rangeSort" #\Space "=" "=" #\Space "z3" #\. "RealSort" #\( #\) #\) #\: #\Space "newVar" #\Space "=" #\Space "z3" #\. "Real" #\( "varName" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "rangeSort" #\Space "=" "=" #\Space "z3" #\. "IntSort" #\( #\) #\) #\: #\Space "newVar" #\Space "=" #\Space "z3" #\. "Int" #\( "varName" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "rangeSort" #\Space "=" "=" #\Space "z3" #\. "BoolSort" #\( #\) #\) #\: #\Space "newVar" #\Space "=" #\Space "z3" #\. "Bool" #\( "varName" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "raise" #\Space "ExptRewriteFailure" #\(  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\' "unknown" #\Space "sort" #\Space "for" #\Space "range" #\Space "of" #\Space "uninterpreted" #\Space "function" #\Space "-" "-" #\Space #\' #\Space "+"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "varName" #\Space "+" #\Space #\' #\Space "returns" #\Space "a" #\Space #\' #\Space "+" #\Space "rangeSort" #\Space "+" #\Space #\' #\Space "?" #\' #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "funQ" #\. "append" #\( #\( "x" #\, #\Space "newVar" #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "newVar"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "ch" #\Space "=" #\Space "x" #\. "children" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "newch" #\Space "=" #\Space "self" #\. "fun_to_var" #\( "ch" #\, #\Space "report" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "len" #\( "ch" #\) #\Space "!" "=" #\Space "len" #\( "newch" #\) #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "raise" #\Space "ExptRewriteFailure" #\( #\' "Internal" #\Space "error" #\' #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "len" #\( "newch" #\) #\Space "=" "=" #\Space "x" #\. "decl" #\( #\) #\. "arity" #\( #\) #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "x" #\. "decl" #\( #\) #\. "__call__" #\( "*" "newch" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( #\( "x" #\. "decl" #\( #\) #\. "arity" #\( #\) #\Space "=" "=" #\Space "2" #\) #\Space "and" #\Space #\( "len" #\( "newch" #\) #\Space ">" #\Space "2" #\) #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "reduce" #\( "x" #\. "decl" #\( #\) #\, #\Space "newch" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "raise" #\Space "ExptRewriteFailure" #\( #\' "Internal" #\Space "error" #\' #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "newExprs" #\Space "=" #\Space "[" "helper" #\( "x" #\) #\Space "for" #\Space "x" #\Space "in" #\Space "exprs" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\( #\' "fun_to_var" #\( #\' #\, #\Space "exprs" #\, #\Space #\' #\) #\Space "-" ">" #\Space #\' #\, #\Space "newExprs" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "newExprs"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "prove" #\( "self" #\, #\Space "hypotheses" #\, #\Space "conclusion" "=" "None" #\, #\Space "report" "=" "None" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\Space "=" #\Space "self" #\. "reportFun" #\( "report" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "x_hyps" #\, #\Space "x_concl" #\Space "=" #\Space "self" #\. "analyse_expt" #\( "hypotheses" #\, #\Space "conclusion" #\, #\Space "report" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "f_hyps" #\, #\Space "f_concl" #\Space "=" #\Space "self" #\. "fun_to_var" #\( "[" "x_hyps" #\, #\Space "x_concl" "]" #\, #\Space "report" #\) "[" #\: "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "f_hyps" #\Space "is" #\Space "None" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "hyps" #\Space "=" #\Space "f_hyps"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "hyps" #\Space "=" #\Space "z3" #\. "simplify" #\( "f_hyps" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "f_concl" #\Space "is" #\Space "None" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "concl" #\Space "=" #\Space "f_concl"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "concl" #\Space "=" #\Space "z3" #\. "simplify" #\( "f_concl" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\( #\' "to_smt_w_expt" #\. "prove" #\: #\' #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\( #\' #\Space #\Space "hypotheses" #\Space "=" #\Space #\' #\, #\Space "hyps" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "report" #\( #\' #\Space #\Space "conclusion" #\Space "=" #\Space #\' #\, #\Space "concl" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "super" #\( "to_smt_w_expt" #\, #\Space "self" #\) #\. "prove" #\( "hyps" #\, #\Space "concl" #\)  #\Newline )
))