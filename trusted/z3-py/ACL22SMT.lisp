(in-package "SMT")
(include-book "SMT-translator")
(define ACL22SMT ()
  :returns (class-content paragraphp)
  (list
    (list #\# #\Space "Copyright" #\Space #\( "C" #\) #\Space "2015" #\, #\Space "University" #\Space "of" #\Space "British" #\Space "Columbia"  #\Newline )
    (list #\# #\Space "Written" #\Space #\( "originally" #\) #\Space "by" #\Space "Mark" #\Space "Greenstreet" #\Space #\( "13th" #\Space "March" #\, #\Space "2014" #\)  #\Newline )
    (list #\# #\Space "Counter" "-" "example" #\Space "generation" #\: #\Space "Carl" #\Space "Kwan" #\Space #\( "May" #\Space "2016" #\)  #\Newline )
    (list #\# #\Space "Editted" #\Space "by" #\Space "Yan" #\Space "Peng" #\Space #\( "15th" #\Space "Nov" #\Space "2016" #\)  #\Newline )
    (list #\#  #\Newline )
    (list #\# #\Space "License" #\: #\Space "A" #\Space "3" "-" "clause" #\Space "BSD" #\Space "license" #\.  #\Newline )
    (list #\# #\Space "See" #\Space "the" #\Space "LICENSE" #\Space "file" #\Space "distributed" #\Space "with" #\Space "this" #\Space "software"  #\Newline )
    (list  #\Newline )
    (list "from" #\Space "z3" #\Space "import" #\Space "*"  #\Newline )
    (list  #\Newline )
    (list "def" #\Space "sort" #\( "x" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space "if" #\Space "type" #\( "x" #\) #\Space "=" "=" #\Space "bool" #\: #\Space #\Space #\Space #\Space "return" #\Space "BoolSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "elif" #\Space "type" #\( "x" #\) #\Space "=" "=" #\Space "int" #\: #\Space #\Space #\Space "return" #\Space "IntSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "elif" #\Space "type" #\( "x" #\) #\Space "=" "=" #\Space "float" #\: #\Space "return" #\Space "RealSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "elif" #\Space "hasattr" #\( "x" #\, #\Space #\' "sort" #\' #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space "x" #\. "sort" #\( #\) #\Space "=" "=" #\Space "BoolSort" #\( #\) #\: #\Space "return" #\Space "BoolSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space "x" #\. "sort" #\( #\) #\Space "=" "=" #\Space "IntSort" #\( #\) #\: #\Space #\Space "return" #\Space "IntSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space "x" #\. "sort" #\( #\) #\Space "=" "=" #\Space "RealSort" #\( #\) #\: #\Space "return" #\Space "RealSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "raise" #\Space "Exception" #\( #\' "unknown" #\Space "sort" #\Space "for" #\Space "expression" #\' #\)  #\Newline )
    (list  #\Newline )
    (list "class" #\Space "ACL22SMT" #\( "object" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space "class" #\Space "status" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "__init__" #\( "self" #\, #\Space "value" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "value" #\Space "=" #\Space "value"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "__str__" #\( "self" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "self" #\. "value" #\Space "is" #\Space "True" #\) #\: #\Space "return" #\Space #\' "QED" #\'  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "self" #\. "value" #\. "__class__" #\Space "=" "=" #\Space #\' "msg" #\' #\. "__class__" #\) #\: #\Space "return" #\Space "self" #\. "value"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "raise" #\Space "Exception" #\( #\' "unknown" #\Space "status" "?" #\' #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "isThm" #\( "self" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\( "self" #\. "value" #\Space "is" #\Space "True" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "class" #\Space "atom" #\: #\Space #\Space #\# #\Space "added" #\Space "my" #\Space "mrg" #\, #\Space "21" #\Space "May" #\Space "2015"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "__init__" #\( "self" #\, #\Space "string" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "who_am_i" #\Space "=" #\Space "string" #\. "lower" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "__eq__" #\( "self" #\, #\Space "other" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\( "self" #\. "who_am_i" #\Space "=" "=" #\Space "other" #\. "who_am_i" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "__ne__" #\( "self" #\, #\Space "other" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\( "self" #\. "who_am_i" #\Space "!" "=" #\Space "other" #\. "who_am_i" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "__str__" #\( "self" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\( "self" #\. "who_am_i" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "__init__" #\( "self" #\, #\Space "solver" "=" "None" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "solver" #\Space "!" "=" #\Space "None" #\) #\: #\Space "self" #\. "solver" #\Space "=" #\Space "solver"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "self" #\. "solver" #\Space "=" #\Space "Solver" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "nameNumber" #\Space "=" #\Space "0"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "Basic" #\Space "Functions"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\#  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "Type" #\Space "declarations"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "isBool" #\( "self" #\, #\Space "who" #\) #\: #\Space "return" #\Space "Bool" #\( "who" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "isInt" #\( "self" #\, #\Space "who" #\) #\: #\Space "return" #\Space "Int" #\( "who" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "isReal" #\( "self" #\, #\Space "who" #\) #\: #\Space "return" #\Space "Real" #\( "who" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "plus" #\( "self" #\, #\Space "*" "args" #\) #\: #\Space "return" #\Space "reduce" #\( "lambda" #\Space "x" #\, #\Space "y" #\: #\Space "x" "+" "y" #\, #\Space "args" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "times" #\( "self" #\, #\Space "*" "args" #\) #\: #\Space "return" #\Space "reduce" #\( "lambda" #\Space "x" #\, #\Space "y" #\: #\Space "x" "*" "y" #\, #\Space "args" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "reciprocal" #\( "self" #\, #\Space "x" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "type" #\( "x" #\) #\Space "is" #\Space "int" #\) #\: #\Space "return" #\( "Q" #\( "1" #\, "x" #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\( "type" #\( "x" #\) #\Space "is" #\Space "float" #\) #\: #\Space "return" #\Space "1" #\. "0" "/" "x"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "return" #\Space "1" #\. "0" "/" "x"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "negate" #\( "self" #\, #\Space "x" #\) #\: #\Space "return" #\Space "-" "x"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "lt" #\( "self" #\, #\Space "x" #\, "y" #\) #\: #\Space "return" #\Space "x" "<" "y"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "equal" #\( "self" #\, #\Space "x" #\, "y" #\) #\: #\Space "return" #\Space "x" "=" "=" "y"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "notx" #\( "self" #\, #\Space "x" #\) #\: #\Space "return" #\Space "Not" #\( "x" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "implies" #\( "self" #\, #\Space "x" #\, #\Space "y" #\) #\: #\Space "return" #\Space "Implies" #\( "x" #\, "y" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "Qx" #\( "self" #\, #\Space "x" #\, #\Space "y" #\) #\: #\Space "return" #\Space "Q" #\( "x" #\, "y" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "type" #\Space "related" #\Space "functions"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "integerp" #\( "self" #\, #\Space "x" #\) #\: #\Space "return" #\Space "sort" #\( "x" #\) #\Space "=" "=" #\Space "IntSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "rationalp" #\( "self" #\, #\Space "x" #\) #\: #\Space "return" #\Space "sort" #\( "x" #\) #\Space "=" "=" #\Space "RealSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "booleanp" #\( "self" #\, #\Space "x" #\) #\: #\Space "return" #\Space "sort" #\( "x" #\) #\Space "=" "=" #\Space "BoolSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "Uninterpreted" #\Space "function" #\Space "types"  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "Z" #\( "self" #\) #\: #\Space "return" #\Space "IntSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "R" #\( "self" #\) #\: #\Space "return" #\Space "RealSort" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "B" #\( "self" #\) #\: #\Space "return" #\Space "BoolSort" #\( #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "ifx" #\( "self" #\, #\Space "condx" #\, #\Space "thenx" #\, #\Space "elsex" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "If" #\( "condx" #\, #\Space "thenx" #\, #\Space "elsex" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "hint_okay" #\( "self" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "False"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space #\Space #\Space #\Space #\Space #\Space #\Space "Proof" #\Space "functions" #\Space "and" #\Space "counter" "-" "example" #\Space "generation"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "get_vars" #\( "self" #\, #\Space "asserts" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\" #\" #\"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "Return" #\Space "a" #\Space "list" #\Space "of" #\Space "ArithRef" #\Space "objects" #\Space "of" #\Space "variables" #\Space "appeared"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "in" #\Space "the" #\Space "list" #\Space "of" #\Space "expressions" #\Space "stored" #\Space "in" #\Space "asserts" #\.  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\" #\" #\"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "acc" #\Space "=" #\Space "[" "]"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "get_vars_ast" #\( "v" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "hasattr" #\( "v" #\, #\Space #\" "children" #\" #\) #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\# #\Space "hopefully" #\, #\Space "v" #\Space "is" #\Space "a" #\Space "z3" #\Space "expression"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space "v" #\. "children" #\( #\) #\Space "=" "=" #\Space "[" "]" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space "not" #\( "is_int_value" #\( "v" #\) #\Space "or" #\Space #\\  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "is_rational_value" #\( "v" #\) #\Space "or" #\Space #\\  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "is_true" #\( "v" #\) #\Space "or" #\Space "is_false" #\( "v" #\) #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "[" "v" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "[" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "children_lst" #\Space "=" #\Space "[" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "for" #\Space "nu" #\Space "in" #\Space "v" #\. "children" #\( #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "children_lst" #\Space "+" "=" #\Space "get_vars_ast" #\( "nu" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "children_lst"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "[" "]"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "for" #\Space "ast" #\Space "in" #\Space "asserts" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "acc" #\Space "+" "=" #\Space "get_vars_ast" #\( "ast" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "list" #\( "set" #\( "acc" #\) #\)  #\Newline )
    (list  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "get_model" #\( "self" #\, #\Space "var_lst" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "m" #\Space "=" #\Space "self" #\. "solver" #\. "model" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "dontcare_lst" #\Space "=" #\Space "[" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "model_lst" #\Space "=" #\Space "[" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "for" #\Space "var" #\Space "in" #\Space "var_lst" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space "m" #\. "__getitem__" #\( "var" #\) #\Space "=" "=" #\Space "None" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "value" #\Space "=" #\Space "m" #\. "eval" #\( "var" #\, #\Space "model_completion" #\Space "=" #\Space "True" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "dontcare_lst" #\. "append" #\( "[" "var" #\, #\Space "value" "]" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "value" #\Space "=" #\Space "m" #\. "eval" #\( "var" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "model_lst" #\. "append" #\( "[" "var" #\, #\Space "value" "]" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "[" "model_lst" #\, #\Space "dontcare_lst" "]"  #\Newline )
    (list  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "translate_to_acl2" #\( "self" #\, #\Space "model_lst" #\, #\Space "dontcare_lst" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "model_acl2" #\Space "=" #\Space "[" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "dontcare_acl2" #\Space "=" #\Space "[" "]"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "translate_value" #\( "n" #\, #\Space "v" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space #\( "is_algebraic_value" #\( "v" #\) #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "rt_obj" #\Space "=" #\Space "str" #\( "v" #\. "sexpr" #\( #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "rt_obj" #\Space "=" #\Space "rt_obj" #\. "replace" #\( #\" "root" "-" "obj" #\" #\, #\Space #\" "cex" "-" "root" "-" "obj" #\Space #\" #\Space "+" #\Space #\" #\' #\" #\Space "+" #\Space "n" #\Space "+" #\Space #\" #\Space "state" #\" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "rt_obj" #\Space "=" #\Space "rt_obj" #\. "replace" #\( #\" #\( "+" #\" #\, #\Space #\" #\' #\( "+" #\" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "translated_v" #\Space "=" #\Space "rt_obj"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "translated_v" #\Space "=" #\Space "str" #\( "v" #\) #\. "replace" #\( #\" #\. "0" #\" #\, #\Space #\" #\" #\) #\. "replace" #\( #\" "False" #\" #\, #\Space #\" "nil" #\" #\) #\. "replace" #\( #\" "True" #\" #\, #\" "t" #\" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "translated_v"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "def" #\Space "translate_model" #\( "model" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "m" #\Space "=" #\Space "model" "[" "0" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "name" #\Space "=" #\Space "m" #\. "decl" #\( #\) #\. "name" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "value" #\Space "=" #\Space "model" "[" "1" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space #\" #\( #\" #\Space "+" #\Space "name" #\Space "+" #\Space #\" #\Space #\" #\Space "+" #\Space "translate_value" #\( "name" #\, #\Space "value" #\) #\Space "+" #\Space #\" #\) #\"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "model_acl2" #\Space "=" #\Space "[" "translate_model" #\( "model" #\) #\Space "for" #\Space "model" #\Space "in" #\Space "model_lst" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "dontcare_acl2" #\Space "=" #\Space "[" "translate_model" #\( "model" #\) #\Space "for" #\Space "model" #\Space "in" #\Space "dontcare_lst" "]"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\Space "[" "model_acl2" #\, #\Space "dontcare_acl2" "]"  #\Newline )
    (list  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "proof_counterExample" #\( "self" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "asserts" #\Space "=" #\Space "self" #\. "solver" #\. "assertions" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "var_lst" #\Space "=" #\Space "self" #\. "get_vars" #\( "asserts" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "[" "model_lst" #\, #\Space "dontcare_lst" "]" #\Space "=" #\Space "self" #\. "get_model" #\( "var_lst" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "[" "model_acl2" #\, #\Space "dontcare_acl2" "]" #\Space "=" #\Space "self" #\. "translate_to_acl2" #\( "model_lst" #\, #\Space "dontcare_lst" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "print" #\Space #\" #\' #\( #\" #\Space "+" #\Space #\" #\Space #\" #\. "join" #\( "model_acl2" "+" "dontcare_acl2" #\) #\Space "+" #\Space #\" #\) #\"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "print" #\Space #\" "Without" #\Space "dontcares" #\: #\Space #\" #\Space "+" #\Space #\" #\' #\( #\" #\Space "+" #\Space #\" #\Space #\" #\. "join" #\( "model_acl2" #\) #\Space "+" #\Space #\" #\) #\"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "proof_success" #\( "self" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "print" #\Space #\" "proved" #\"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "proof_fail" #\( "self" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "print" #\Space #\" "failed" #\Space "to" #\Space "prove" #\"  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\# #\Space "usage" #\Space "prove" #\( "claim" #\) #\Space "or" #\Space "prove" #\( "hypotheses" #\, #\Space "conclusion" #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space "def" #\Space "prove" #\( "self" #\, #\Space "hypotheses" #\, #\Space "conclusion" "=" "None" #\) #\:  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\( "conclusion" #\Space "is" #\Space "None" #\) #\: #\Space "claim" #\Space "=" #\Space "hypotheses"  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "claim" #\Space "=" #\Space "Implies" #\( "hypotheses" #\, #\Space "conclusion" #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "solver" #\. "push" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "solver" #\. "add" #\( "Not" #\( "claim" #\) #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "res" #\Space "=" #\Space "self" #\. "solver" #\. "check" #\( #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "if" #\Space "res" #\Space "=" "=" #\Space "unsat" #\: #\Space "self" #\. "proof_success" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "elif" #\Space "res" #\Space "=" "=" #\Space "sat" #\: #\Space "self" #\. "proof_counterExample" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "else" #\: #\Space "self" #\. "proof_fail" #\( #\)  #\Newline )
    (list  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "self" #\. "solver" #\. "pop" #\( #\)  #\Newline )
    (list #\Space #\Space #\Space #\Space #\Space #\Space #\Space #\Space "return" #\( "self" #\. "status" #\( "res" #\Space "=" "=" #\Space "unsat" #\) #\)  #\Newline )
))