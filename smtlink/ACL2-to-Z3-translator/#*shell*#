yanpeng@kokanee:~$ ls
./			    .fontconfig/       Notes
../			    .gconf/	       Pictures/
.adobe/			    .gconfd/	       .procmailrc.sample
.bash_history		    .gnome/	       project/
.bash_logout		    .gnome2/	       Public/
.bash_profile		    .gnome2_private/   public_html/
.bashrc			    .gnupg/	       .pulse/
.bashrc~		    .gstreamer-0.10/   .pulse-cookie
.bashrc.swo		    .gtk-bookmarks     .pyhistory
.bashrc.swp		    .gtkrc-1.2-gnome2  .rcc/
.cache/			    .gvfs/	       .recently-used
C:\nppdf32Log\debuglog.txt  .hplip/	       .saves-5177-kultarr.cs.ubc.ca
.config/		    .ICEauthority      .scim/
.dbus/			    .icedtea/	       Sent Messages
deja-dup/		    .kde/	       software/
Desktop/		    .kde4/	       .softwareupdate/
.dmrc			    .libreoffice/      .spam-filter
Documents/		    .libreoffice_old/  .ssh/
Downloads/		    .local/	       .subversion/
Drafts			    .macromedia/       Templates/
.dropbox/		    Mail/	       .thumbnails/
.dt/			    .mailboxlist       .thunderbird/
.dtprofile*		    .matlab/	       Videos/
.emacs			    .metacity/	       .viminfo
.emacs.d/		    .mission-control/  WINDOWS/
.esd_auth		    .mozilla/	       .Xauthority
.evolution/		    Music/	       .xsession-errors
.felix/			    .newsrc
yanpeng@kokanee:~$ cd project/
yanpeng@kokanee:project$ ls
./  ../  ACL2/
yanpeng@kokanee:project$ cd ACL
bash: cd: ACL: No such file or directory
yanpeng@kokanee:project$ ACL2/
bash: ACL2/: Is a directory
yanpeng@kokanee:project$ ls
./  ../  ACL2/
yanpeng@kokanee:project$ cd ACL2/
yanpeng@kokanee:ACL2$ ls
./  ../  config/  DPLL/  smtlink/  z3_interface/
yanpeng@kokanee:ACL2$ cd smtlink/
yanpeng@kokanee:smtlink$ ls
./   ACL2-to-Z3-translator/  SMT-evaluator/  SMT-interpreter/  tests/
../  SMT-connector/	     SMT-formula/    SMT-run/
yanpeng@kokanee:smtlink$ cd ACL2-to-Z3-translator/
yanpeng@kokanee:ACL2-to-Z3-translator$ ls
./			     translate-expression.lisp
../			     translate-function.lisp
translate-arithmetic.lisp    translate-hypothesis.lisp
translate-comparison.lisp    translate-logic.lisp
translate-conclusion.lisp    translate-number.lisp
translate-constant.lisp      translate-SMT-formula.lisp
translate-declaration.lisp   translate-theorem.lisp
#translate-expression.lisp#  translate-type.lisp
yanpeng@kokanee:ACL2-to-Z3-translator$ ls
./			     translate-expression.lisp
../			     translate-function.lisp
translate-arithmetic.lisp    translate-hypothesis.lisp
translate-comparison.lisp    translate-logic.lisp
translate-conclusion.lisp    translate-number.lisp
translate-constant.lisp      translate-SMT-formula.lisp
translate-declaration.lisp   translate-theorem.lisp
#translate-expression.lisp#  translate-type.lisp
yanpeng@kokanee:ACL2-to-Z3-translator$ ls
./			     translate-expression.lisp
../			     translate-function.lisp
translate-arithmetic.lisp    translate-hypothesis.lisp
translate-comparison.lisp    translate-logic.lisp
translate-conclusion.lisp    translate-number.lisp
translate-constant.lisp      translate-SMT-formula.lisp
translate-declaration.lisp   translate-theorem.lisp
#translate-expression.lisp#  translate-type.lisp
yanpeng@kokanee:ACL2-to-Z3-translator$ cd ..
yanpeng@kokanee:smtlink$ ls
./   ACL2-to-Z3-translator/  SMT-evaluator/  SMT-interpreter/  tests/
../  SMT-connector/	     SMT-formula/    SMT-run/
yanpeng@kokanee:smtlink$ cd SMT-formula/
yanpeng@kokanee:SMT-formula$ ls
./  ../  checker/  constructor/
yanpeng@kokanee:SMT-formula$ cd constructor/
yanpeng@kokanee:constructor$ ls
./		     SMT-declaration.lisp     SMT-hypothesis.lisp
../		     #SMT-expression.lisp#    SMT-logic.lisp
SMT-arithmetic.lisp  SMT-expression.lisp      SMT-number.lisp
SMT-comparison.lisp  SMT-formula.lisp	      SMT-type.lisp
SMT-conclusion.lisp  SMT-function-exist.lisp  test-SMT-formula.lisp
SMT-constant.lisp    SMT-function.lisp
yanpeng@kokanee:constructor$ cd ..
yanpeng@kokanee:SMT-formula$ ls
./  ../  checker/  constructor/
yanpeng@kokanee:SMT-formula$ cd ..
yanpeng@kokanee:smtlink$ ls
./   ACL2-to-Z3-translator/  SMT-evaluator/  SMT-interpreter/  tests/
../  SMT-connector/	     SMT-formula/    SMT-run/
yanpeng@kokanee:smtlink$ cd ACL2-to-Z3-translator/
yanpeng@kokanee:ACL2-to-Z3-translator$ ls
./			     translate-expression.lisp
../			     translate-function.lisp
translate-arithmetic.lisp    translate-hypothesis.lisp
translate-comparison.lisp    translate-logic.lisp
translate-conclusion.lisp    translate-number.lisp
translate-constant.lisp      translate-SMT-formula.lisp
translate-declaration.lisp   translate-theorem.lisp
#translate-expression.lisp#  translate-type.lisp
yanpeng@kokanee:ACL2-to-Z3-translator$ cat translate-function.lisp 
;; translate-function-list contains functions for translating a list of SMT function definitions into Z3 code
(in-package "ACL2")
(include-book "translate-expression")

;; translate-func-name
(defun translate-func-name (name)
  "translate-func-name: translate a function name"
  name)

;; translate-func-formal
(defun translate-func-formal (formal)
  "translate-func-formal: translate a formal of a function"
  formal)

;; translate-func-formal-list
(defun translate-func-formal-list (formal-list)
  "translate-func-formal-list: translate a function formal list"
  (if (consp (cdr formal-list))
      (cons (translate-func-formal (car formal-list))
	    (cons ', (translate-func-formal-list (cdr formal-list))))
    formal-list))


;; translate-function
(defun translate-function (func)
  "translate-function: translate a function definition into a Z3 function defintion"
  (let ((name (car function))
	(formal (cadr function))
	(body (caddr function)))
    (list 'def
	  (translate-fun-name name)
	  '( (translate-fun-formal formal) ')
	  '\:
	  'return
	  (translate-fun-expression body))))

;; translate-funciton-list
(defun translate-function-list (func-list)
  "translate-function-list: translates a list of function definitions into Z3 function definitions"
  (if (consp func-list)
      (cons (translate-function (car func-list)) 
	    (cons #\Newline (translate-function-list (cdr func-list))))
    nil))
yanpeng@kokanee:ACL2-to-Z3-translator$ ls
./			      translate-expression.lisp
../			      translate-function.lisp
translate-arithmetic.lisp     translate-hypothesis.lisp
translate-comparison.lisp     translate-logic.lisp
translate-conclusion.lisp     translate-number.lisp
translate-constant.lisp       translate-SMT-formula.lisp
translate-declaration.lisp    translate-theorem.lisp
.#translate-expression.lisp@  translate-type.lisp
yanpeng@kokanee:ACL2-to-Z3-translator$ cd ..
yanpeng@kokanee:smtlink$ ls
./   ACL2-to-Z3-translator/  SMT-evaluator/  SMT-interpreter/  tests/
../  SMT-connector/	     SMT-formula/    SMT-run/
yanpeng@kokanee:smtlink$ cd SMT-formula/
yanpeng@kokanee:SMT-formula$ ls
./  ../  checker/  constructor/
yanpeng@kokanee:SMT-formula$ cd constructor/
yanpeng@kokanee:constructor$ ls
./		     SMT-declaration.lisp     SMT-hypothesis.lisp
../		     #SMT-expression.lisp#    SMT-logic.lisp
SMT-arithmetic.lisp  SMT-expression.lisp      SMT-number.lisp
SMT-comparison.lisp  SMT-formula.lisp	      SMT-type.lisp
SMT-conclusion.lisp  SMT-function-exist.lisp  test-SMT-formula.lisp
SMT-constant.lisp    SMT-function.lisp
yanpeng@kokanee:constructor$ cat SMT-function-exist.lisp 
;; SMT-function-exist contains function for checking if a SMT function exist in the function list. 
;; Not implemented for now.
(in-package "ACL2")

;; SMT-function-exist
(defun SMT-function-exist (name)
  "SMT-function-exist: construct a function symbol that exist in function list"
  (if (symbolp name)
      name
    (cw "Error: This function does not exist: ~q0" name)))
yanpeng@kokanee:constructor$o
WARNING: terminal is not fully functional
Missing filename ("less --help" for help)
yanpeng@kokanee:constructor$ ls
./		     SMT-declaration.lisp     SMT-hypothesis.lisp
../		     #SMT-expression.lisp#    SMT-logic.lisp
SMT-arithmetic.lisp  SMT-expression.lisp      SMT-number.lisp
SMT-comparison.lisp  SMT-formula.lisp	      SMT-type.lisp
SMT-conclusion.lisp  SMT-function-exist.lisp  test-SMT-formula.lisp
SMT-constant.lisp    SMT-function.lisp
yanpeng@kokanee:constructor$ cd ..
yanpeng@kokanee:SMT-formula$ ls
./  ../  checker/  constructor/
yanpeng@kokanee:SMT-formula$ cd ..
yanpeng@kokanee:smtlink$ ls
./   ACL2-to-Z3-translator/  SMT-evaluator/  SMT-interpreter/  tests/
../  SMT-connector/	     SMT-formula/    SMT-run/
yanpeng@kokanee:smtlink$ cd ACL2-to-Z3-translator/
yanpeng@kokanee:ACL2-to-Z3-translator$ ls
./			    translate-function.lisp
../			    translate-hypothesis.lisp
translate-arithmetic.lisp   translate-logic.lisp
translate-comparison.lisp   translate-number.lisp
translate-conclusion.lisp   translate-SMT-formula.lisp
translate-constant.lisp     translate-theorem.lisp
translate-declaration.lisp  translate-type.lisp
translate-expression.lisp
yanpeng@kokanee:ACL2-to-Z3-translator$ cat translate-function.lisp 
;; translate-function-list contains functions for translating a list of SMT function definitions into Z3 code
(in-package "ACL2")
(include-book "translate-expression")

;; translate-func-name
(defun translate-func-name (name)
  "translate-func-name: translate a function name"
  name)

;; translate-func-formal
(defun translate-func-formal (formal)
  "translate-func-formal: translate a formal of a function"
  formal)

;; translate-func-formal-list
(defun translate-func-formal-list (formal-list)
  "translate-func-formal-list: translate a function formal list"
  (if (consp (cdr formal-list))
      (cons (translate-func-formal (car formal-list))
	    (cons ', (translate-func-formal-list (cdr formal-list))))
    formal-list))


;; translate-function
(defun translate-function (func)
  "translate-function: translate a function definition into a Z3 function defintion"
  (let ((name (car function))
	(formal (cadr function))
	(body (caddr function)))
    (list 'def
	  (translate-fun-name name)
	  '( (translate-fun-formal formal) ')
	  '\:
	  'return
	  (translate-expression body))))

;; translate-funciton-list
(defun translate-function-list (func-list)
  "translate-function-list: translates a list of function definitions into Z3 function definitions"
  (if (consp func-list)
      (cons (translate-function (car func-list)) 
	    (cons #\Newline (translate-function-list (cdr func-list))))
    nil))
yanpeng@kokanee:ACL2-to-Z3-translator$ ls
./			      translate-expression.lisp
../			      translate-function.lisp
translate-arithmetic.lisp     translate-hypothesis.lisp
translate-comparison.lisp     translate-logic.lisp
translate-conclusion.lisp     translate-number.lisp
translate-constant.lisp       translate-SMT-formula.lisp
translate-declaration.lisp    translate-theorem.lisp
.#translate-expression.lisp@  translate-type.lisp
yanpeng@kokanee:ACL2-to-Z3-translator$ cd ..
yanpeng@kokanee:smtlink$ ls
./   ACL2-to-Z3-translator/  SMT-evaluator/  SMT-interpreter/  tests/
../  SMT-connector/	     SMT-formula/    SMT-run/
yanpeng@kokanee:smtlink$ cd SMT-formula/
yanpeng@kokanee:SMT-formula$ ls
./  ../  checker/  constructor/
yanpeng@kokanee:SMT-formula$ cd constructor/
yanpeng@kokanee:constructor$ ls
./		     SMT-declaration.lisp     SMT-hypothesis.lisp
../		     #SMT-expression.lisp#    SMT-logic.lisp
SMT-arithmetic.lisp  SMT-expression.lisp      SMT-number.lisp
SMT-comparison.lisp  SMT-formula.lisp	      SMT-type.lisp
SMT-conclusion.lisp  SMT-function-exist.lisp  test-SMT-formula.lisp
SMT-constant.lisp    SMT-function.lisp
yanpeng@kokanee:constructor$ cat SMT-expression.lisp 
;; SMT-expression contains function defining an SMT 
;; expression that is build upon
;; arithmetic, comparison and logic operators. 
(in-package "ACL2")
(include-book "../checker/is-SMT-logic")
(include-book "SMT-logic")
(include-book "../checker/is-SMT-comparison")
(include-book "SMT-comparison")
(include-book "../checker/is-SMT-number")
(include-book "SMT-number")
(include-book "../checker/is-SMT-declaration")
(include-book "SMT-declaration")
(include-book "../checker/is-SMT-arithmetic")
(include-book "SMT-arithmetic")
(include-book "../checker/is-SMT-comparison")
(include-book "SMT-comparison")
(include-book "../checker/is-SMT-function-existing")
(include-book "SMT-function-exist")

;; function <- expression | arithmetic
;; expression <- logic
;; logic <- logic | comparison
;; comparison <- arithmetic
;; Q: Should it be my job or the user's job to make sure that there's no mix of different type of functions?
;;    I'm asumming the type of function matches the place it is inserted by the user.

(mutual-recursion
;; SMT-arithmetic-expression-long
(defun SMT-arithmetic-expression-long (expression)
  "SMT-arithmetic-expression-long: the multiple operands of an + or * expression"
  (if (consp expression)
      (cons (SMT-arithmetic-expression (car expression)) 
	    (SMT-arithmetic-expression-long (cdr expression)))
    nil))

;; SMT-arithmetic-expression
(defun SMT-arithmetic-expression (expression)
  "SMT-arithmetic-expression: a SMT arithmetic expression"
  (if (consp expression)
      (cond ((is-SMT-arithmetic (car expression)) 
	     (cond ((or (is-SMT-plus (car expression)) (is-SMT-multiply (car expression))) 
		    (cons (SMT-arithmetic (car expression))
			  (SMT-arithmetic-expression-long (cdr expression))))
		   (t 
		    (if (equal (len (cdr expression)) 2)
			(list (SMT-arithmetic (car expression)) 
			      (SMT-arithmetic-expression (cadr expression)) 
			      (SMT-arithmetic-expression (caddr expression)))
		      (cw "Error: Wrong number of operands: ~q0" expression)))))
	    ((is-SMT-function-existing (car expression))
	     (cons (SMT-function-exist (car expression))
		   (SMT-arithmetic-expression-long (cdr expression))))
	    (t (cw "Error: Invalid arithmetic operator: ~q0" (car expression))))
    (cond ((is-SMT-number expression) (SMT-number expression))
	  ((is-SMT-var-name expression) (SMT-var-name expression))
	  (t (cw "Error: Invalid number or variable: ~q0" expression)))))
)

;; SMT-comparison-expression
(defun SMT-comparison-expression (expression)
  "SMT-comparison-expression: a SMT comparison expression"
  (if (not (equal (len expression) 3))
      (cw "Error: Wrong number of operands in a SMT comparison expression: ~q0" expression)
    (let ((oprt (car expression))
	  (exp1 (cadr expression))
	  (exp2 (caddr expression)))
      (list (SMT-comparison oprt)
	    (SMT-arithmetic-expression exp1)
	    (SMT-arithmetic-expression exp2)))))

(mutual-recursion
 ;; SMT-logic-expression-long
 (defun SMT-logic-expression-long (expression)
   "SMT-logic-expression-long: the multiple operands of an and or or expression"
   (if (consp expression)
       (cons (SMT-logic-expression (car expression)) 
	     (SMT-logic-expression-long (cdr expression)))
     nil))

 ;; SMT-logic-expression
 (defun SMT-logic-expression (expression)
   "SMT-logic-expression: a SMT expression made of logic expressions, or comparisons"
   (if (consp expression)
       (cond ((is-SMT-comparison (car expression)) 
	      (SMT-comparison-expression expression))
	     ((is-SMT-logic (car expression)) 
	      (cond ((or (is-SMT-and (car expression)) 
			 (is-SMT-or (car expression)))
		     (cons (SMT-logic (car expression))
			   (SMT-logic-expression-long (cdr expression))))
		    ((is-SMT-not (car expression))
		     (if (equal (len (cdr expression)) 1)
			 (list (SMT-not (car expression))
			       (SMT-logic-expression (cadr expression)))
		       (cw "Error: Wrong number of operands in a not expression: ~q0" expression)))))
	     ((is-SMT-function-existing (car expression))
	       (cons (SMT-function-exist (car expression))
		     (SMT-logic-expression-long (cdr expression))))
	      (t (cw "Error: Invalid SMT logic expression: ~q0" expression)))
     (cond ((is-SMT-number expression) (SMT-number expression))
	   ((is-SMT-var-name expression) (SMT-var-name expression))
	   (t (cw "Error: Invalid variable: ~q0" expression)))))
 )


(mutual-recursion
;; SMT-fun-input-expression-long
(defun SMT-fun-input-expression-long (expression)
  "SMT-fun-input-expression-long: inputs of a SMT function expression"
  (if (consp expression)
      (cons (SMT-fun-expression (car expression)) 
	    (SMT-fun-input-expression-long (cdr expression)))
    nil))

;; SMT-fun-expression
(defun SMT-fun-expression (expression)
  "SMT-fun-expression: a SMT expression for function body"
  (if (consp expression)
      (cond ((is-SMT-arithmetic (car expression)) 
	     (SMT-arithmetic-expression expression))
	    ((or (is-SMT-logic (car expression))
		 (is-SMT-comparison (car expression)))
	     (SMT-logic-expression expression))
	    ((is-SMT-function-existing (car expression))
	     (cons (SMT-function-exist (car expression))
		   (SMT-fun-input-expression-long (cdr expression))))
	    (t
	     (cw "Error: This is not a valid SMT function: ~q0" (car expression))))
    (cond ((is-SMT-number expression) (SMT-number expression))
	  ((is-SMT-var-name expression) (SMT-var-name expression))
	  (t (cw "Error: Invalid number or variable: ~q0" expression)))))
)

;; SMT-expression
(defun SMT-expression (expression)
  "SMT-expression: a SMT expression made of arithmetic, comparison and logic formulas"
  (if (not (listp expression))
      (cw "Error: The SMT expression is not a list: ~q0" expression)
    (SMT-logic-expression expression)))

yanpeng@kokanee:constructor$ ls
./		     SMT-declaration.lisp     SMT-hypothesis.lisp
../		     #SMT-expression.lisp#    SMT-logic.lisp
SMT-arithmetic.lisp  SMT-expression.lisp      SMT-number.lisp
SMT-comparison.lisp  SMT-formula.lisp	      SMT-type.lisp
SMT-conclusion.lisp  SMT-function-exist.lisp  test-SMT-formula.lisp
SMT-constant.lisp    SMT-function.lisp
You have mail in /var/mail/yanpeng
yanpeng@kokanee:constructor$ cat SMT-con
cat: SMT-con: No such file or directory
yanpeng@kokanee:constructor$ cat SMT-constant.lisp 
;; SMT-constant contains functions for constructing and identifying SMT constant declarations
(in-package "ACL2")
(include-book "SMT-number")

;; SMT-constant-name
(defun SMT-constant-name (name)
  "SMT-constant-name: This is a SMT constant name"
  (if (symbolp name)
      name
    (cw "Error: This is not a valid SMT constant name: ~q0" name)))

;; SMT-constant
(defun SMT-constant (constant)
  "SMT-constant: This is a SMT constant declaration"
  (if (not (equal (len constant) 2))
      (cw "Error: Wrong number of elements in a constant declaration list: ~q0" constant)
    (let ((name (car constant)) 
	  (value (cadr constant)))
      (list (SMT-constant-name name) (SMT-number value)))))


;; SMT-constant-list-help
(defun SMT-constant-list-help (constant-list)
  "SMT-constant-list: This is a list of SMT constant declarations, the helper function"
  (if (consp constant-list)
      (cons (SMT-constant (car constant-list)) (SMT-constant-list-help (cdr constant-list)))
    nil))

;; SMT-constant-list
(defun SMT-constant-list (constant-list)
  "SMT-constant-list: This is a list of SMT constant declarations"
  (if (not (listp constant-list))
      (cw "Error: The SMT constant list is not in the right form: ~q0" constant-list)
    (SMT-constant-list-help constant-list)))
yanpeng@kokanee:constructor$ ls
./		     SMT-declaration.lisp     SMT-hypothesis.lisp
../		     #SMT-expression.lisp#    SMT-logic.lisp
SMT-arithmetic.lisp  SMT-expression.lisp      SMT-number.lisp
SMT-comparison.lisp  SMT-formula.lisp	      SMT-type.lisp
SMT-conclusion.lisp  SMT-function-exist.lisp  test-SMT-formula.lisp
SMT-constant.lisp    SMT-function.lisp
yanpeng@kokanee:constructor$ cd .
yanpeng@kokanee:constructor$ cd ..
yanpeng@kokanee:SMT-formula$ ls
./  ../  checker/  constructor/
yanpeng@kokanee:SMT-formula$ cd ..
yanpeng@kokanee:smtlink$ ls
./   ACL2-to-Z3-translator/  SMT-evaluator/  SMT-interpreter/  tests/
../  SMT-connector/	     SMT-formula/    SMT-run/
yanpeng@kokanee:smtlink$ cd ACL2-to-Z3-translator/
yanpeng@kokanee:ACL2-to-Z3-translator$ ls
./			    translate-function.lisp
../			    translate-hypothesis.lisp
translate-arithmetic.lisp   translate-logic.lisp
translate-comparison.lisp   translate-number.lisp
translate-conclusion.lisp   translate-SMT-formula.lisp
translate-constant.lisp     translate-theorem.lisp
translate-declaration.lisp  translate-type.lisp
translate-expression.lisp   translate-variable.lisp
yanpeng@kokanee:ACL2-to-Z3-translator$ ls
./			    translate-hypothesis.lisp
../			    translate-logic.lisp
translate-arithmetic.lisp   translate-number.lisp
translate-comparison.lisp   translate-operator.lisp
translate-conclusion.lisp   translate-SMT-formula.lisp
translate-constant.lisp     translate-theorem.lisp
translate-declaration.lisp  translate-type.lisp
translate-expression.lisp   translate-variable.lisp
translate-function.lisp
You have mail in /var/mail/yanpeng
yanpeng@kokanee:ACL2-to-Z3-translator$ acls
If 'acls' is not a typo you can use command-not-found to lookup the package that contains it, like this:
    cnf acls
yanpeng@kokanee:ACL2-to-Z3-translator$ acl2
Welcome to Clozure Common Lisp Version 1.9  (LinuxX8664)!

 ACL2 Version 6.4 built February 28, 2014  21:05:36.
 Copyright (C) 2014, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-6-4 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

ACL2 Version 6.4.  Level 1.  Cbd 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/".
System books directory 
"/ubc/cs/research/isd/users/software/ACL2/acl2-sources/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2 !>(ld "translate-expression.lisp")

ACL2 Version 6.4.  Level 2.  Cbd 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/".
System books directory 
"/ubc/cs/research/isd/users/software/ACL2/acl2-sources/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2 !>> "ACL2"
ACL2 !>>
ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "translate-number" ...):
Unable to load compiled file for book
  /ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-
number.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "translate-number" ...):
There is no certificate on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-number.lisp".



Summary
Form:  ( INCLUDE-BOOK "translate-number" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
 "/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-number.lisp"
ACL2 !>>
ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "translate-variable"
...):  Unable to load compiled file for book
  /ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-
variable.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "translate-variable" ...):
There is no certificate on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-variable.lisp".



Summary
Form:  ( INCLUDE-BOOK "translate-variable" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
 "/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-variable.lisp"
ACL2 !>>
ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "translate-operator"
...):  Unable to load compiled file for book
  /ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-
operator.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "translate-operator" ...):
There is no certificate on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-operator.lisp".



ACL2 Warning [Uncertified] in ( INCLUDE-BOOK 
"../SMT-formula/checker/is-SMT-arithmetic" ...):  There is no certificate
on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/SMT-formula/checker/is-SMT-arithmetic.lisp".



ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "translate-arithmetic"
...):  There is no certificate on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-arithmetic.lisp".



ACL2 Warning [Uncertified] in ( INCLUDE-BOOK 
"../SMT-formula/checker/is-SMT-logic" ...):  There is no certificate
on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/SMT-formula/checker/is-SMT-logic.lisp".



ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "translate-logic" ...):
There is no certificate on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-logic.lisp".



ACL2 Warning [Uncertified] in ( INCLUDE-BOOK 
"../SMT-formula/checker/is-SMT-comparison" ...):  There is no certificate
on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/SMT-formula/checker/is-SMT-comparison.lisp".



ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "translate-comparison"
...):  There is no certificate on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-comparison.lisp".



ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "translate-function" ...):
There is no certificate on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-function.lisp".



***********************************************
************ ABORTING from raw Lisp ***********
Error:  Illegal comma encountered by READ.
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
 (:STOP-LD 1)
ACL2 !>',

***********************************************
************ ABORTING from raw Lisp ***********
Error:  Illegal comma encountered by READ.
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2 !>'\:
|:|
ACL2 !>'\,
|,|
ACL2 !>'\(
|(|
ACL2 !>(good-bye)
((LD "translate-expression.lisp")
 GOOD-BYE)
ACL2 !)

***********************************************
************ ABORTING from raw Lisp ***********
Error:  Reader error on #<SYNONYM-STREAM to *TERMINAL-IO* #x30200254E85D>, within ")
":
Unmatched ')' .
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
ACL2 !>(good-bye)

yanpeng@kokanee:ACL2-to-Z3-translator$ acl2
Welcome to Clozure Common Lisp Version 1.9  (LinuxX8664)!

 ACL2 Version 6.4 built February 28, 2014  21:05:36.
 Copyright (C) 2014, Regents of the University of Texas
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the LICENSE file distributed with ACL2.

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-6-4 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

ACL2 Version 6.4.  Level 1.  Cbd 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/".
System books directory 
"/ubc/cs/research/isd/users/software/ACL2/acl2-sources/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2 !>(ld "translate-expression.lisp")

ACL2 Version 6.4.  Level 2.  Cbd 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/".
System books directory 
"/ubc/cs/research/isd/users/software/ACL2/acl2-sources/books/".
Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2 !>> "ACL2"
ACL2 !>>
ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "translate-number" ...):
Unable to load compiled file for book
  /ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-
number.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "translate-number" ...):
There is no certificate on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-number.lisp".



Summary
Form:  ( INCLUDE-BOOK "translate-number" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  0.01 seconds (prove: 0.00, print: 0.00, other: 0.01)
 "/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-number.lisp"
ACL2 !>>
ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "translate-variable"
...):  Unable to load compiled file for book
  /ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-
variable.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "translate-variable" ...):
There is no certificate on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-variable.lisp".



Summary
Form:  ( INCLUDE-BOOK "translate-variable" ...)
Rules: NIL
Warnings:  Uncertified and Compiled file
Time:  0.00 seconds (prove: 0.00, print: 0.00, other: 0.00)
 "/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-variable.lisp"
ACL2 !>>
ACL2 Warning [Compiled file] in ( INCLUDE-BOOK "translate-operator"
...):  Unable to load compiled file for book
  /ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-
operator.lisp
because that book is not certified.  See :DOC include-book.  No load
was in progress for any parent book.


ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "translate-operator" ...):
There is no certificate on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-operator.lisp".



ACL2 Warning [Uncertified] in ( INCLUDE-BOOK 
"../SMT-formula/checker/is-SMT-arithmetic" ...):  There is no certificate
on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/SMT-formula/checker/is-SMT-arithmetic.lisp".



ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "translate-arithmetic"
...):  There is no certificate on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-arithmetic.lisp".



ACL2 Warning [Uncertified] in ( INCLUDE-BOOK 
"../SMT-formula/checker/is-SMT-logic" ...):  There is no certificate
on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/SMT-formula/checker/is-SMT-logic.lisp".



ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "translate-logic" ...):
There is no certificate on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-logic.lisp".



ACL2 Warning [Uncertified] in ( INCLUDE-BOOK 
"../SMT-formula/checker/is-SMT-comparison" ...):  There is no certificate
on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/SMT-formula/checker/is-SMT-comparison.lisp".



ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "translate-comparison"
...):  There is no certificate on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-comparison.lisp".



ACL2 Warning [Uncertified] in ( INCLUDE-BOOK "translate-function" ...):
There is no certificate on file for 
"/ubc/cs/home/y/yanpeng/project/ACL2/smtlink/ACL2-to-Z3-translator/translate-function.lisp".



***********************************************
************ ABORTING from raw Lisp ***********
Error:  Illegal comma encountered by READ.
***********************************************

The message above might explain the error.  If not, and
if you didn't cause an explicit interrupt (Control-C),
then the root cause may be call of a :program mode
function that has the wrong guard specified, or even no
guard specified (i.e., an implicit guard of t).
See :DOC guards.

To enable breaks into the debugger (also see :DOC acl2-customization):
(SET-DEBUGGER-ENABLE T)
 (:STOP-LD 1)
ACL2 !>#\,
#\,
ACL2 !>#\Newline
#\Newline
ACL2 !>
|

|
ACL2 !>'=
=
ACL2 !>'\"
|"|
ACL2 !>'<
<
ACL2 !>